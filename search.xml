<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新手解题博客2</title>
      <link href="/2021/07/25/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A22/"/>
      <url>/2021/07/25/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A22/</url>
      
        <content type="html"><![CDATA[<h2 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h2><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><p>（1）this is flag</p><p><strong>题目：</strong></p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A22/QQ%E5%9B%BE%E7%89%8720210726003948.png" alt="QQ图片20210726003948" style="zoom: 50%;" /><p><strong>解题：</strong>flag即题目所给。</p><p>（2）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新手解题博客1</title>
      <link href="/2021/07/25/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/"/>
      <url>/2021/07/25/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/</url>
      
        <content type="html"><![CDATA[<h2 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h2><p>注释：建议在虚拟机中进行解题。</p><h3 id="basic："><a href="#basic：" class="headerlink" title="basic："></a>basic：</h3><p>（1）：Linux Labs</p><p><strong>题目：</strong>2020年10月24日 更新：目前所有靶机均能直接访问互联网。点击启动靶机可以启动一台安装好了 LAMP 的机器。并且这台机器位于靶机内网，所有动态靶机均可直接通过主机名访问这台机器。但由于目前一个账户只能同时启动一台靶机，您如果有需要建议浏览器开一个隐私窗口，注册一个新账号来启动这个靶机。ssh 用户名：root 密码：123456 地址和端口为动态分配的。</p><p><strong>解题：</strong>在虚拟机终端（ctrl+alt+t)输入命令“ssh -p 端口号 root@地址”回车输入yes再回车输入默认密码123456连接靶机。然后输入命令“cd ..”或“cd/”进入根目录，再输入命令“ls”查看含有flag的文件（flag.txt）。最后输入命令“cat flag.txt”查看文件即可找到flag。</p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/%E5%9B%BE%E7%89%876.png" alt="图片6" style="zoom:50%;" /><p><strong>小知识：</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>cd</td><td>切换当前目录至其它目录，比如进入/etc目录，则执行cd/etc</td></tr><tr><td>cd -</td><td>返回进入此目录之前所在的目录</td></tr><tr><td>cd .</td><td>进入当前目录</td></tr><tr><td>cd ..</td><td>返回上级目录（若当前目录为“/“，则执行完后还在“/“；”..”为上级目录的意思）</td></tr><tr><td>cd ../..</td><td>返回上两级目录</td></tr><tr><td>cd/</td><td>进入根目录</td></tr><tr><td>cd !$</td><td>把上个命令的参数作为cd参数使用</td></tr><tr><td>cd~</td><td>进入用户在该系统的home目录，例如xz用户，则进入/root/xz目录。要深入了解linux命令可以网站查找”Linux命令大全“</td></tr></tbody></table><p>要深入了解linux命令可以网站查找”Linux命令大全“</p><p>（2）BUU LFI COURSE 1</p><p><strong>解题：</strong>在题目所给连接后面加上“/?file=/flag”再进行访问即可得到flag。</p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/QQ%E5%9B%BE%E7%89%8720210726003232.png" alt="QQ图片20210726003232" style="zoom: 80%;" /><p><strong>小知识：</strong></p><p>LFI漏洞原理：</p><blockquote><p>文件包含漏洞的产生原因是通过引入文件时，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意代码注入。<strong>当被包含的文件在服务器本地时，就形成的本地文件包含漏洞</strong></p></blockquote><p>（3）Upload-Labs-Linux</p><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><p>（1）签到题</p><p><strong>题目：</strong></p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/QQ%E5%9B%BE%E7%89%8720210726183346.png" alt="QQ图片20210726183346" style="zoom:50%;" /><p><strong>解题：</strong>不要怀疑，就是题目所给的flag。</p><p>（2）金三胖</p><p><strong>题目：</strong></p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/aaa_ABC%E7%9C%8B%E5%9B%BE.gif" alt="aaa_ABC看图" style="zoom: 67%;" /><p><strong>解题：</strong>可以将gif拖进ps中进行分解图层。（也可以借助其他工具，例：stegsolve）</p><p>ps：分解图层后找flag所在图层（这里为了便于查看，我将flag所在图层调在一块了）解得flag{he11ohongke}（注意：这里是11（数字1）不是ll（L小写）哦）</p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/QQ%E5%9B%BE%E7%89%8720210726183957.png" alt="QQ图片20210726183957" style="zoom: 25%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第六篇博客</title>
      <link href="/2021/07/24/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/24/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="CRYPTO初步学习"><a href="#CRYPTO初步学习" class="headerlink" title="CRYPTO初步学习"></a>CRYPTO初步学习</h2><h3 id="cry-rsa加密与攻击"><a href="#cry-rsa加密与攻击" class="headerlink" title="cry-rsa加密与攻击"></a>cry-rsa加密与攻击</h3><p>注！还需进行理解学习并继续</p><p>学习链接：nep.am473ur.com</p><h4 id="什么是RSA"><a href="#什么是RSA" class="headerlink" title="什么是RSA"></a>什么是RSA</h4><p><strong>小知识：</strong></p><p>RSA是一种非对称加密</p><p>对称密码和非对称密码的区别：如果加密和解密用的是相同的密钥则为对称密码；如果加密和解密用的是不同的密钥，且加密密钥只能加密，解密密钥只能解密则为非对称密码。</p><p>对称密码加解密密钥一样因此均为私钥；而非对称密码加密密钥可以公开则为公钥，揭秘密码为私钥。</p><p>单向函数（简记：单向通行）：对每一个输入x，函数值f（x）都很容易计算；对随机给出的函数值f（x），算出原始输入x却比较困难；使用陷门信息则可以反逆。</p><p>哈希算法只能用于加密，不能用于解密，因为没有陷门信息可以反逆，正常的加密是需要解密的。</p><h4 id="一点点数论基础"><a href="#一点点数论基础" class="headerlink" title="一点点数论基础"></a>一点点数论基础</h4><p><strong>同余：</strong>（简记：余数相同）</p><p>定义：若a，b为两个整数，且它们的差a-b能被某个自然数m所整除，则称a就模m来说同余于b，或者说a和b关于模m同余，记为：a≡b(mod m)。它意味着：a-b=m*k（k为某一个整数）。</p><p>性质：没有同除性</p><p>1.反身性：a≡a (mod m)；</p><p>2.对称性：若a≡b(mod m)，则b≡a (mod m)；</p><p>3.传递性：若a≡b(mod m)，b≡c(mod m)，则a≡c(mod m)；</p><p>4.（1）同余式相加：若a≡b(mod m)，c≡d(mod m)，则a+c≡b+d(mod m)；</p><p>（2）同加性：若a≡b(mod m)，则a+c≡b+c(mod m)</p><p>5.（1）同余式相乘：若a≡b(mod m)，c≡d(mod m)，则a$<em>c≡b</em>$d(mod m)。</p><p>（2）同乘性：若a≡b(mod m)，则a$<em>c≡b</em>$c(mod m)</p><p>6.同幂性：若a≡b(mod m)，则a^n^≡b^n^(mod m)</p><p>7.推论1：a$<em>$b mod k=(a mod k)$</em>$(b mod k)mod k</p><p>8.推论2：若a mod p=x，a mod q=x，p，q互质，则a mod p$*$q=x</p><p><strong>模逆元：</strong>（简记：参考倒数xy=1的定义）</p><p>定义：模逆元也称为模倒数。一整数a对同余n之模逆元是指满足以下公示的整数b：a^-1^≡b(mod n)也可以写成以下的式子：ab≡1(mod n)。整数a对模数n之逆元存在的充分必要条件是a和n互素，若此模逆元存在，在模数n下的除法可以用和对应模逆元的乘法来达成，此概念和实数除法的概念相同。</p><p>代码：</p><p>1.可以使用Python第三方包Crypto的inverse()函数求模逆元。</p><p>from Crypto.util.number import inverse print(inverse(3,7))#3是要求逆元的数，7是模数<br>2.可以使用Python第三方包gmpy2的 invert()函数求模逆元。</p><p>from gmpy2 import invert<br>print(invert(3,7)#3是要求逆元的数，7是模数<br>3.可以在SageMath中直接用inverse_mod()函数求模逆元。</p><p>inverse_mod(3,7)#3是要求逆元的数，7是模数</p><p><strong>欧拉函数：</strong></p><p>Z<del>m</del>内与m互素的整数的个数记为φ（m）</p><p>幸运的是,如果m的因式分解是已知的,则存在一个更简单的计算方法,如下图所示。</p><img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/QQ%E5%9B%BE%E7%89%8720210728200205.png" alt="QQ图片20210728200205" style="zoom:50%;" /><p>假设m = 240 , 240因式分解对应的素因数相乘形式为:<br>m= 240= 16·15= 2^4^·3·5<br>φ(m)=2^3^·(2-1)·(3-1)·(5- 1)=8·1·2·4= 64<br>所以想要计算出一个合数的欧拉函数，需要先知道这个数的因式分解，一些大整数的乘积难以被分解的特点也保证了RSA公钥加密的安全性。</p><p><strong>费马小定理：</strong>假如a为一个整数，p为一个素数，则a^p-1^=1 (mod p)</p><p><strong>欧拉定理：</strong>假设a和m都是整数,且gcd(a，m)=1(a与m的最大公约数为1即a与m互素）则有a^φ(m)^ = 1 (mod m)——&gt;比如a=2，m=3，则Z<del>m</del>=0,1,2，其中1，2为Z<del>m</del>内与m互素的整数即φ（m）=2。原式=2^2^≡1(mod 3)</p><p>注：费马小定理是欧拉定理的特殊情况</p><h4 id="RSA是如何加密和解密的"><a href="#RSA是如何加密和解密的" class="headerlink" title="RSA是如何加密和解密的"></a>RSA是如何加密和解密的</h4><p>RSA加密中会出现以下几个参数:</p><p>●两个大的素数p和q，以及它们的积n , n是加解密过程中的模数</p><p>●欧拉函数p(n)=(p-1)*(q-1)</p><p>●加密指数e ,和解密指数d = invert(e, φ(n))</p><p>●密文c,明文m</p><p>●d是e对 φ(n)的逆元即e和d在模 φ(n)的运算下互为倒数</p><p><strong>加密：c=m^e^mod n<br>解密：m=c^d^mod n</strong></p><h4 id="python简单实现RSA算法"><a href="#python简单实现RSA算法" class="headerlink" title="python简单实现RSA算法"></a>python简单实现RSA算法</h4><p><strong>生成随机素数：</strong></p><p>getPrime()函数，括号里的参数意义为位长度，下面示例表示生成一个512bits的随机素数。</p><pre><code class="python">from Crypto.Util.number import *p = getPrime(512)</code></pre><p>getStrongPrime()函数，括号里的参数意义为位长度，生成一个更安全的素数。</p><pre><code class="python">from Crypto.Util.number import *p = getStrongPrime(512)</code></pre><p><strong>计算模逆元的两个函数的区别：</strong></p><p>使用Crypto包里的inverse() 函数,两个参数不互素的时候返回的是除以最大公因数之后的逆元。互素的情况下和gmpy2的invert返回值相同。</p><pre><code class="python">from Crypto. 4til. number import *d = inverse(e, (p-1)*(q-1))</code></pre><p>使用gmpy2包里的invert()函数，两个参数不满足互素时会报错，只有满足互素时正常求逆元。</p><pre><code class="python">from gmpy2 import invertd = invert(e, (p-1)*(q-1))</code></pre><p><strong>判断素数：</strong></p><p>isPrime(可以用来判断素数）</p><pre><code class="python">from Crypto. Util, number import *print(isPrime(7))</code></pre><p>求最大公因数</p><pre><code class="python">from Crypto.Util. number import *print (GQD(12, 18)) # 6</code></pre><p><strong>开n次方根：</strong></p><p>使用gmpy2的iroot函数，可以开n次方根，返回一个数字，一个布尔值。数字表示开根的结果，布尔值表示结果的n次方是否刚好等于原来的数。</p><pre><code class="python">from gmpy2 import irootprint (iroot(4,2)) #表示对4开平方根</code></pre><p><strong>RSA加密：</strong></p><pre><code class="python">from Crypto.Util.number import *m = 123456e = 65537p, q = getPrime(128), getPrime(128) n = p*qC = pow(m, e, n)print(c)#46446567530734328956895050621451855413068614241783489657583370527982913123577</code></pre><p>例子：（理解！）</p><p>现在Alice想要接收Bob的一-串数字123456 ，他们的通信线路是不安全的，可以被攻击者Eve窃听到，所以他们可以使用RSA公钥加密算法，使信息安全的传输。<br>Alice首先需要生成公钥(e, n) ，和不发送的私钥d。Alice 会将(e, n)发送给Bob ：</p><pre><code class="python">from Crypto.Util.number import *e = 65537p, q = getPrime(128), getPrime (128)n = p*qd = inverse(e, (p-1)*(q-1))print(&quot;n =&quot;,n)print(&quot;d =&quot;,d)#n=6411909786146702584131486972338640117238044567019786914226150985552161578#d=34488339696882282190704342167311503848344429551595618555980250777974774475</code></pre><p>现在Bob接收到了Alice 发送的公钥(e, n) ，他使用这组公钥加密自己的明文，并把密文c发送给Alice :</p><pre><code class="python">from Crypto.Util.number import *e = 65537n = 64119097861467025841314869723386401172380445670197869142261509855521615781313m = 123456c = pow(m, e, n)print(&quot;c =&quot; ,c)#C = 35175039627001706475239565374293351303180888840171603334474497768320397005778</code></pre><p>Alice接收到了c，她还有之前生成的解密指数d ，她可以用私钥(d, n)解开密文：</p><pre><code class="python">from Crypto.Util.number import *d = 34488339696882282190704342167311503848344429551595618555980250777974774475073n = 64119097861467025841314869723386401172380445670197869142261509855521615781313C = 351750396270017064752395653742935130318888840171603334474497768320397005778m = pow(c, d, n)print(&quot;m =&quot;，m)#m = 123456</code></pre><p>所以Alice最终得到了Bob的明文，并且他们在这条不安全的通信线路中传递了两次信息，这两次都被Eve成功窃听到。</p><p>那么Eve现在掌握的信息是:<br>●Alice 和Bob在使用RSA公钥加密算法传递信息。<br>●窃听到了Alice发送的e和n。<br>●窃听到了Bob发送的c。<br>Eve想要窃取到明文m ，需要从这三个参数入手。<br>在很多CTF密码学题目中，我们解题就相当于Eve做的事情一攻击加密算法。</p><h4 id="RSA相关的攻击算法"><a href="#RSA相关的攻击算法" class="headerlink" title="RSA相关的攻击算法"></a>RSA相关的攻击算法</h4><p><strong>分解素因数攻击：</strong></p><p>以上面的Alice和Bob泄露的信息为例，开始第一种攻击，我们现在已知的参数：<br>e = 65537<br>n = 64119097861467025841314869723386401172380445670197869142261509855521615781313<br>c = 35175039627001706475239565374293351303180888840171603334474497768320397005778<br>解密需要计算pow(c, d, n) ，所以我们需要知道d ，然而d = invert(e，φ(n)) ，这个式子中我们已知了e和n， invert很好计算,就需要算q(n) ，现在问题是如何计算n的欧拉函数，我们需要知道n的素因数分解。</p><p>n的数值很大，RSA中常用的数量级往往不能通过枚举的方法（试除法）分解因数。但是如果生成的素数是不安全的，有可能导致n很容易被分解。<br>在这一个例子中，我们可以知道n是256位的，这种长度完全是不安全的（通常生成的素数约2048位），所以我们尝试使用一些算法或工具来尝试分解n。<br>整数分解算法：<a href="https://www.alpertran.cam.ar/ECM.HTM">https://www.alpertran.cam.ar/ECM.HTM</a><br>整数因数/数据库查询：<a href="http://www.factordb.com/index.php">http://www.factordb.com/index.php</a></p><p>平滑数：因式分解中最大的素因数比它小（？）</p><p><strong>共模攻击：</strong></p><p>如果在 RSA 的使用中使用了相同的模n对相同的明文m进行了加密，那么就可以在不分解n的情况下还原出明文m的值。<br><img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/wps1.png" alt="img"> =c<del>1</del>(mod n)，<img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/wps2.png" alt="img"> = c<del>2</del>(mod n)<br>通过扩展欧几里德算法，可以计算出:<br>这样就有:<img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/wps3.png" alt="img">= m^re1+se2^=m^1^(mod n).<br>但是r和s 中必有一个是负数，所以需要用逆元来处理一下(假设s&lt;0)：<br>m^1^=m^re1+se2^= <img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/wps4.png" alt="img">，其中s+即|s|= -s</p><p><strong>已知p+q或p-q：</strong></p><p>或者是题目给了其他的pq之间的关系，通过解方程组或推导来求出p和q。<br>$p<em>q = n<br>p+q = a<br>使用SageMath解方程组：<br>var(‘p q’)<br>solve([p</em>q = = n,p+q = = a],[p, q])$</p><p>也可以用python进行求解，SageMath比较方便简洁。</p><p><strong>小公钥指数攻击：</strong></p><p>当加密指数e很小，比如e = 3时，c可能不比n大很多(在可枚举的范围之内)。<br>这样就存在一个较小的可枚举的 k满足：<br>m^3^=c+k·n<br>尝试枚举k并开根，能刚好开根的就是解。</p><p><strong>已知e，d分解n：</strong></p><p>ed ≡ 1(mod φ(n))</p><p>ed = 1+k·φ(n),k&lt;e</p><p>穷举k，计算出φ(n)</p><p>φ(n) = (p-1)(q-1) = n-(p+q)+1</p><p>解一个二元二次方程组</p><p>p+q = n-φ(n)+1</p><p>p·q = n</p><p><strong>已知明文高位攻击：</strong>……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第五篇博客</title>
      <link href="/2021/07/24/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/24/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="CRYPTO初步学习"><a href="#CRYPTO初步学习" class="headerlink" title="CRYPTO初步学习"></a>CRYPTO初步学习</h2><h3 id="古典密码学介绍"><a href="#古典密码学介绍" class="headerlink" title="古典密码学介绍"></a>古典密码学介绍</h3><p>注！还需进行理解学习</p><h4 id="1-什么是密码学"><a href="#1-什么是密码学" class="headerlink" title="1.什么是密码学"></a>1.什么是密码学</h4><p><strong>小知识：</strong></p><p>（1）密码学不只是计算机科学的内容，密码学的研究包括历史、政治学、工程、语言军事学、伦理、数学和工业技术学等。</p><p>（2）CTF中的古典密码学题目有时也会出现在杂项里面，古典加密常常不给出加密算法，需要判断或者尝试一下。而CTF中的现代加密常常会给出加密算法,或者以一些形式提示某种常用的加密算法。即通过公开的加密算法和题目给<br>的条件来思考解密的算法并加以实现。</p><p><strong>分类：</strong></p><p>（1）<strong>古典密码学</strong>主要关注信息的保密书写和传递，以及与其相对应的破译方法。</p><p>（2）<strong>现代密码学</strong>不只关注信息保密问题，还同时涉及信息完整性验证、信息发布的不可抵赖性、以及在分布式计算中产生的来源于内部和外部的攻击的所有信息安全的问题。</p><p>（3）在有关密码学的一-些描述中,常使用Alice和Bob作为两个想要传递消息的两个人，Eve是想要从传递的密文中窃取明文信息的人。</p><p>（4）对于一组函数ε= (E，D) :<br>E为加密函数( encryption function)，密钥k ，明文m ，那么密文c = E(k,m).<br>D为解密函数( decryption function)，密钥k ，密文m ，那么明文m= D(k,c).<br>——&gt;<strong>D(k,E(k,m)) = m.</strong></p><h4 id="2-凯撒加密"><a href="#2-凯撒加密" class="headerlink" title="2.凯撒加密"></a>2.凯撒加密</h4><p><strong>定义：</strong>凯撒加密（Caesar cipher）是一种最简单且最广为人知的加密技术，它属于替代加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。</p><p><strong>方法：</strong>凯撒加密会生成一个一一对应的密码表，加密和解密过程都是通过查表完成的。<br>和很多其他的单表替换加密一样,凯撒加密是十分不安全的。可以把移位值看作密钥key ,不难想到,在明文空间为26个英文字母时,有效的密钥只有25个。所以很容易枚举出来。</p><p><strong>脚本：</strong></p><pre><code class="python">#明文变密文，根据自己设定的固定数目将明文进行移位生成对应密文form string import ascii_uppercasePlaintext=&quot;明文&quot;Key=想要移位的位数Plaintext=Plaintext.upper()Ciphertext=&quot;&quot;for i in Plaintext:    if i not in ascii_uppercase:        Ciphertext +=i    else:        Ciphertext +=chr(((ord(i)-ord(&quot;A&quot;)-Key)%26)+ord(&quot;A&quot;))print(Ciphertext)</code></pre><pre><code class="python">#密文变明文：把密文对应的所有结果都输出来，再判断哪个具有可读性即为所解明文from string import ascii_uppercaseCiphertext=&quot;密文&quot;Ciphertext=Ciphertext=Ciphertext.upper()def shift(Key):    Plaintext=&quot;&quot;    for i in Ciphertext:        if i not in ascii_uppercase:            Plaintext +=i        else:             Plaintext +=chr(((ord(i)-ord(&quot;A&quot;)-Key)%26)+ord(&quot;A&quot;))     return Plaintextfor Key in range(26):    print(shift(Key))</code></pre><h4 id="3-关键词加密"><a href="#3-关键词加密" class="headerlink" title="3.关键词加密"></a>3.关键词加密</h4><p><strong>定义：</strong>关键词加密( keyword cipher )也是一种单表替代加密，与凯撒加密不同之处在于密钥可以更为复杂。</p><p><strong>方法：</strong>加密时需要选择一个关键词,如果这个关键词有重复的字母，去除除第一次出现之外的所有的相同的字母。例如,如果选定的关键词为“success”，则使用“suce”。将该关键词写在字母表的下方,并用字母表的其他字母按标准的顺序填写余下的空间。这样就构建了字母一一对应的关系 ，加密时用下面一行中的字母对应替换上面一行的字母；解密时用上面一行中的字母对应替换下面一行的字母。</p><p>例题：</p><p>the keyword is MAGICNET</p><img src="/images/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E7%89%872.png" alt="图片2" style="zoom:50%;" /><h4 id="4-仿射加密"><a href="#4-仿射加密" class="headerlink" title="4.仿射加密"></a>4.仿射加密</h4><p>也是一种单表替代加密，生成一个密码表后进行替代加密。</p><p><strong>加密：</strong>在仿射加密中,每个字母都对应一个数字(字母a-z分别对应数字0-25)，仿射加密法的密钥为0~ 25之间的数字对(a,b) , a与26的最大公约数必须为1,即GCD(a,26)=1,这就是说，能整除a和26的数只有1,例如a=2就是不可以的，因为GCD(2,26) = 2,a = 5就可以,因为只有1能整除5和26。p 为明文字母对应的数字, c为密文字母对应的数字。<br>——&gt;c=a·p + b (mod 26)</p><p><strong>解密：</strong>解密时需要计算(或枚举)密钥数字对中a的逆元，也就是a对26的模反数。模反数可以简单理解为整数环中的倒数，a乘以a的模反数对26取模等于1。例如5对26的逆元就是21。所以一个数乘以a ，再乘以a的逆元，就能算回原来的数。</p><p>求逆元可以用Python的第三方包gmpy2的invert函数：</p><pre><code class="python">from gmpy2 import invertprint(invert(5,26)) #21</code></pre><p>解密时已知密钥对(a，b) ，以及密文c ，可以通过下面的同余式计算出明文p。<br>——&gt;p=a^-1^(c-b) mod 26</p><p><strong>例题：</strong></p><pre><code class="python">from string import digits,ascii_lowercase#读取数字和小写字母的字符串from secret import numers,A,B#从题目文件中读取数字、A和Bassert min([i in digits for i in numbers])#提示：numbers里面的字符都是digits里面的flag = &quot;flag&#123;&quot;+&quot;&quot;.join([ascii_lowercase[int(i)]for i in numbers])+&quot;&#125;&quot;#把数字转换为字母，例如0对Aassert numbers == &quot;&quot;.join([str(ascii_lowercase.find(i))for i in flag[5:-1]])#与上一行意思相同，防止出错Ciphertext = &quot;&quot;#开始加密for i in flag:#注意扫描进行加密    if i not in ascii_lowercase:        Ciphertext += i#判断扫描的字符是否在小写字母里面，如果不在则照抄然后扫描下一个，例如“&#123;”直接保留    else:        Ciphertext += ascii_lowercase[(ascii_lowercase.find(i)*A+B) % 26]print(&quot;Ciphertext =&quot;,Ciphertext)#对小写字母进行加密#Ciphertext = vjsg&#123;dckvzksr&#125;</code></pre><p>解密的话先把a和b爆破出来，然后求A的逆元，由于密钥对(a，b)的两个变量有效的值都是小于26的，所以枚举也是完全可以承受的。得到(a, b)之后就可以正常解密了。</p><p><strong>总结：</strong>仿射加密本质上也是通过密钥对(a, b)生成了一个密码表，明文和密文中的字母具有一一对应的关系 ，且a与模数26互素保证了不重不漏。所以仿射加密也是一种单表替换加密，虽然比前面两种生成密码表的方式复杂一些，但也是顶不住针对单表替换的密码分析的。</p><h4 id="5-单表替代密码分析"><a href="#5-单表替代密码分析" class="headerlink" title="5.单表替代密码分析"></a>5.单表替代密码分析</h4><p><strong>方法：</strong>可以利用不同的英文字母在文段中的出现频率特征，来帮助我们判断某个字母被替换成了某个字母的可能性。</p><img src="/images/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E7%89%873.png" alt="图片3" style="zoom:80%;" /><p>词频分析不仅针对单个字母的出现频率，同时有很多连续的两个字母出现频率较高（双联字母bigrams），也可以辅助我们进行分析。</p><p>以下是平均在1000个单词中，各双联字母出现的次数：</p><img src="/images/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E7%89%875.png" alt="图片5" style="zoom:50%;" /><p>另外，如果有一个较大的单词库，还可以通过单词的格式，进一步帮助我们缩小可能的范围，例如单词happy为12334格式，success为1233411格式，那么被进行单表替换后，它的格式并不会发生改变。这种模式匹配的优点在于即使密文长度较短，也能尽可能能找到接近真相的结果。</p><p><strong>注意：</strong>密文有空格的话使用词频分析，除非把空格位置找到。</p><p><strong>推荐网站：</strong><a href="https://quipqiup.com/">https://quipqiup.com/</a></p><h4 id="6-维吉尼亚加密"><a href="#6-维吉尼亚加密" class="headerlink" title="6.维吉尼亚加密"></a>6.维吉尼亚加密</h4><p><strong>定义：</strong>维吉尼亚密码是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码。为了生成密码，需要使用表格法。这一表格包括了26行字母表，每一行都由前一行向左偏移一位得到。具体使用哪一行字母表进行编译是基于密钥进行的，在过程中会不断地变换。</p><img src="https://img2.baidu.com/it/u=3049389388,2093541746&fm=26&fmt=auto&gp=0.jpg" alt="img" style="zoom:50%;" /><p><strong>加密：</strong></p><p>例如：</p><p>明文：ATTACKATDAWN</p><p>选择关键词：LEMON，重复关键词，直到长度和明文相同，作为密钥LEMONLEMONLE</p><p>通过等长的明文和密钥，依次查表得到密文：LXFOPVEFRNHR</p><p><strong>特点：</strong>维吉尼亚加密可以避免直接的词频分析攻击，密文在统计上没有明显的规律，但是任然可以对其进行破解。</p><p>首先提出破解方法的Frederick Kasiski是基于这样一个简单的观察“密钥的重复部分与明文中的重复部分的连接，在密文中也产生一个重复部分”。</p><p>如果一个字符串在明文中重复，并且被密钥相同的部分加密，那么在密文中也会出现重复的字符串。</p><p><strong>解密：</strong></p><p>先进行关键词长度的判断，一旦确定了关键词的长度，余下的问题就只是如何使用该信息去找到真正的关键词了。关键词的长度揭示了密文可以被如何破解成单码加密的一个集合。</p><p>关键词的长度为n，那么破解维吉尼亚加密的问题就变成了解决n个单表加密的问题，需要有足够长的密文，然后通过词频分析逐个解决问题。</p><p>注：在单表加密中，无论什么密码表，相同的密文字母对应的明文字母也相同，但是在多表加密中，相同的密文字母可能映射出不同的明文字母。</p><h4 id="7-替换和编码"><a href="#7-替换和编码" class="headerlink" title="7.替换和编码"></a>7.替换和编码</h4><p>使用python脚本进制转换：</p><pre><code class="python">x = 123456 #十进制整数x_hex = hex(x)[2:] #十进制转十六进制x_bin = bin(x)[2:] #十进制转二进制print(x_hex, x_bin) #1e240 11110001001000000a = int(x_hex, 16) #十六进制转十进制b = int(x_bin, 2) #二进制转十进制print(a, b) #123456 123456</code></pre><p>字符串（str）类型和字节（bytes）类型相互转换：</p><pre><code class="python">s = &quot;flag&#123;this_is_flag&#125;&quot; #字符串类型s_bytes = s.encode() #字符串类型转字节类型s_str = s_bytes.encode() #字节类型转字符串类型print(s_bytes, s_str) #b&#39;flag&#123;this_is_flag&#125;&#39; flag&#123;this_is_flag&#125;</code></pre><p>base64编码解码：</p><pre><code class="python">import base64s = b&#39;flag&#123;this_is_flag&#125;&#39; #字节类型s_encode = base64.b64encode(s)#进行base64编码s_decode = base64.b64decode(s_encode) #继续宁base64解码print(s_encode, s_edcode) #b&#39;ZmxhZ3t0aGlzX2lzX2ZsYWd9&#39; b&#39;flag&#123;tihs_is_flag&#125;</code></pre><p>整数和字节类型的转换：</p><p>这种类型转换在密码方向题目中很常见，整数类型可以直接参与数学计算，字节类型会展示可读的字符</p><pre><code class="python">from Crypto.Util.number import *s = b&#39;flag&#123;this_is_flag&#125;&#39; #字节类型s_int = byte_to_long(s) #字节类型转为整数s_bytes = long_to_bytes(s_int) #证书转为字节类型print(s_int, s_bytes)</code></pre><p>不在范围内的字符（不可显示的）会以/-x……的形式显示出其的十六进制。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第四篇博客</title>
      <link href="/2021/07/20/%E7%AC%AC%E5%9B%9B%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/20/%E7%AC%AC%E5%9B%9B%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="MISC初步学习"><a href="#MISC初步学习" class="headerlink" title="MISC初步学习"></a>MISC初步学习</h2><h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><h4 id="小知识："><a href="#小知识：" class="headerlink" title="小知识："></a>小知识：</h4><p>注释：可练习题目进行掌握</p><p>（1）在使用抓包软件进行流量分析时，抓到的包往往含有数据链路层、网络层、传输层、应用层四个部分，其中每一个部分在传递到不同的层面的时候会被利用并丢弃。</p><p>（2）wreshark抓到的包工作在数据链路层（若网卡特殊则也可抓到物理层，启动慢是因为在寻找接口），而burpsuite抓到的http包则工作在应用层。</p><p>（3）物理层传输方式：WIFI无线通信（电磁波）、千兆网线（八根导线，百兆为四根）</p><p>（4）当同时连接网线和WIFI时，因为物理网口的跃点数比无线网口的跃点数低，跃点数越低则优先级越高，故选择以太网接口进行查看。</p><p>（5）视频/直播的数据很多是走UDP通道的。</p><p>（6）http与https：https协议是加密的</p><p>（7）加密协议统称为tls</p><p>（8）集线器会将信号转发给除了发送源的其他所有端口，因此不安全，容易被窃听。</p><p>（9）当多台计算机通过交换机（对照交换表精准转发，隔离冲突域）相连时，它们采用的通信方式是数据链路层的协议。当某台计算机想给另一个计算机发送消息时，需要在以太帧头中指明发送方和接收方的地址，交换机在接收到信号之后会根据这个地址正确地将信号转发至某一个端口（即网线），从而避免了网络内所有计算机都能收到信号。以太帧中的数据是我们想要传输的信息，包括接下来的IP数据包。想要转发给其它所有计算机的时候，目的MAC地址改为全0（广播地址）。</p><p>（10）当网卡地址变动时需刷新交换表，因此启用网络层配一个虚拟地址即IP地址，IP地址和MAC地址可以一对多也可以多对一。ARP协议将网络地址转换为物理地址。</p><p>（11）路由器进行跨网段转发。家用路由器集成多种功能。</p><p>（12）QQ聊天基于QICQ协议。</p><p>（13）用软件ubuntu连接服务器后输入命令nc -l 8888对8888端口进行监听。在windows powershell中输入命令ncat git.nepwn com 8888回车后输入内容，便可在ubuntu窗口接收到。</p><p>可在windows powershell中输入命令nslookup git.nepwn com进行服务器IP地址的查询。</p><p>可在ubuntu中输入命令ncat -lk 8888 –chat来进行多人聊天服务器的安装。</p><p>（14）http基于tcp，http端口为80。</p><p>（15）要分析病毒或者恶意软件建议在虚拟机里进行，这样就不会干扰到我们的宿主机。</p><p>（16）用wireshark/科来网络分析系统分析报文寻找flag。</p><p>有时查找到的flag需要用在线工具进行解密，有时在用wireshark做流量分析时也要将软件进行解密设置（打开对应的密钥文件），否则flag藏在加密的数据包里面而无法查找。</p><p>有些在请求包里面的题目可以用一般的流量导出的方法，然后在ubuntu中输入命令grep flag -rna .进行查找。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第三篇博客</title>
      <link href="/2021/07/19/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/19/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="MISC初步学习"><a href="#MISC初步学习" class="headerlink" title="MISC初步学习"></a>MISC初步学习</h2><h3 id="数据编码"><a href="#数据编码" class="headerlink" title="数据编码"></a>数据编码</h3><h4 id="1-常见进制（01-二进制、hex）"><a href="#1-常见进制（01-二进制、hex）" class="headerlink" title="1.常见进制（01/二进制、hex）"></a>1.常见进制（01/二进制、hex）</h4><p><strong>（1）进制转换：</strong></p><p><strong>二进制转ascii码：</strong></p><p>二进制转化为十进制再对照ascii码表查找。</p><p>二进制转图片（hex）；二进制转万物……</p><p>二进制进位规则是“逢二进一”，借位规则是“以一当二”。</p><p><strong>二进制转morse码：</strong></p><p>二进制转十进制，然后对照ascii码表找相应字符。——&gt;初学者可以浏览器上搜索摩斯密码解密利用在线工具解读morse码，等熟练掌握之后可以用自己的python库或者自行编写一个小程序。</p><p><strong>二进制转二维码（绘图）：</strong>利用python的PIL库编写脚本</p><pre><code class="python">from PIL import ImageMAX=25//数据位数开平方pic=Image.new(&quot;RGB&quot;,(MAX,MAX))str=&quot;数据(二进制数)&quot;i=0for y in range(0,MAX):    for x in range(0,MAX):        if(str[i]==&#39;1&#39;):            pic.putpixel([x,y],(0,0,0))        else:            pic.putpixel([x,y](255,255,255))        i=i+1pic.show()pic.save(&quot;文件名（包括文件类型即扩展名）&quot;)</code></pre><p>两个方法：（遇到的问题将另外整理出来一篇。）</p><p>（1）python直接运行（需配置所需库）（2）虚拟机Linux环境下用python运行（需注意版本）</p><p><strong>二进制转图片：</strong></p><p>二进制转为十六进制（可借助在线工具，也可借助python脚本）再用十六进制编辑器（winhex/010等）生成文件进行保存，文件类型需自行根据开头结尾的数值进行判断。</p><h4 id="2-常见编码（jjencode、uuencode、jsfuck、brainfuck、ook！、敲击码、二维码）"><a href="#2-常见编码（jjencode、uuencode、jsfuck、brainfuck、ook！、敲击码、二维码）" class="headerlink" title="2.常见编码（jjencode、uuencode、jsfuck、brainfuck、ook！、敲击码、二维码）"></a>2.常见编码（jjencode、uuencode、jsfuck、brainfuck、ook！、敲击码、二维码）</h4><p>注意：未明确说明编码方式则去浏览器搜索在线工具帮忙转换/加解密。</p><p><strong>Ascii码：</strong></p><p>是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语。二进制转换为十进制后对照ASCII码表查找。</p><img src="/images/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/image1.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg" alt="点击查看源网页" style="zoom:50%;" /><p><strong>Base家族：</strong></p><p><strong>推荐软件：Cyberchef</strong>，可以在左侧operations处输入“magic”然后直接将字符串拖入框框进行自动识别，也可以自己一个个试（输入64、16等）。转换时记得将当前没有使用的模块断掉。</p><p>（1）base64：</p><p>编码原理：Base64编码要求把3个8位字节转化为4个6位字节，之后在6位的前面补两个0，形成8位一个字节的形式（即4个8位字节）。6位2进制能表示的最大数是2的6次方是64，因此共64个字符（A-Z，a-z，0-9，+，/），=不属于编码字符，而是填充字符。</p><img src="/images/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/cdn2.lmonkey.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg" alt="点击查看源网页" style="zoom:50%;" /><p>（2）base36：</p><p>规则：Base36包含0~9的数字，加上所有26个字母，不区分大小写，不包含任何标点，所有的字母要不全大写，要不全小写。</p><p>特点：密文由36个字符（0-9，a-z/A-Z）组成，加密仅支持整数数字，解密仅支持字符串，不支持中文。</p><p>（3）base58：</p><p>规则：采用的字符集为”9个数字+ 49个字母“：<br>“123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ”，Base58是纯数字与字母组成而且去掉了容易弓|起视觉混淆的字符(0: 数字零，O:大写O, I:大写i，l:小写L)。</p><p>特点：base58不适用数字“0”，字母大写“O”，字母大写“I”，和字母小写：“l”，以及“+”和“/”符号。</p><p>（4）base62：</p><p>规则：26个字母大小写再加0-9，共62个字符，相比于base64只是去掉了两个符号（+和/）</p><p>特点：密文由62个字符（0-9，a-z，A-Z）组成。</p><p>（5）base85：不常用</p><p>规则：一种类似于base64的二进制文本编码形式，通过使用五个SACII字符来表示四个字节的二进制数据。例如：它用于将图像嵌入到Adobe PDF文件中。</p><p>（6）base91、base92：</p><p>base91：</p><p>特点:由91个字符(0-9，a-Z，A-Z，!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`{|}”)组成</p><p>base92：</p><p>特点：比base91多一个字符~</p><p><strong>morse：</strong></p><p>定义：摩尔斯点码（morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。由美国人艾尔菲德·维尔与萨缪尔·摩尔斯于1836年发明。是一种早期的数字化通信方式。</p><p>国际摩尔斯电码规则：</p><p>（1）一点的长度是一个单位；</p><p>（2）一划是三个单位；</p><p>（3）在一个字母中点划之间的间隔是一点；</p><p>（4）两个字母之间的间隔是三点（一划）；</p><p>（5）两个单词之间的间隔是七点。</p><p><strong>shellcode：</strong>在后台</p><p>定义：是一段利用软件漏洞而执行的代码，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。</p><p>方法：shellcode从十六进制转换为十进制再查ASCII码表。</p><p><strong>urlencode：</strong></p><p>定义：url编码又叫百分号编码，是一种统一资源定位（URL）编码方式。URL地址（常说网址）规定了常用的数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其他所有字符必须通过%xx编码处理。</p><p>方法：在该字节ascii码的16进制字符前面加%，如空格字符，ascii码是32，对应16进制是“20”，那么urlencode编码结果是：%20。</p><p><strong>unicode：</strong></p><p>中文又称万国码、国际码、统一码、单一码，是计算机科学领域的业界标准。</p><p>有两种形式：（1）“\u”开头；（2）“&amp;#x”开头，“；”结果。</p><p><strong>aaencode：</strong></p><p>可以将JS代码转换成常用的网络表情，也就是我们说的颜文字js加密。</p><p><strong>jjencode：</strong></p><p>由交换符、等号、下划线、括号、加号组成。</p><p><strong>uuencode：</strong></p><p>uuencode是二进制信息和文字信息之间的转换编码，也就是机器和人眼识读的转换。常见于电子邮件信息的传输，目前已被多用途互联网邮件扩展（MIME）大量取代。</p><p><strong>jsfuck：</strong></p><p>可以只用6个字符<a href=""></a>!+来编写JavaScript程序。</p><p><strong>brainfuck：</strong>+&lt;&gt;[]-.</p><p><strong>Ook!与short ook！:</strong></p><p>（1）Ook：全部由Ook！组成</p><p>（2）short ook！：.?!</p><p>经典题：short ook！藏到图片的ISP里面，放在最低有效位，难发现。</p><p><strong>敲击码：</strong></p><p>定义：以一种非常简单的方式对文本信息进行编码的方法，因该编码对信息通过使用一系列敲击声音来编码而命名，敲击码是基于5*5方格来实现的，不同点是把K字母整合到了C字母里面。</p><img src="/images/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/QQ%E5%9B%BE%E7%89%8720210722212146.png" alt="QQ图片20210722212146"  /><p><strong>二维码：</strong></p><p>定义：用某种特定几何图形按一定规律在平面分布的黑白相间的图片记录数据符号信息。分为堆叠式/行排式二维码又称堆积式二维码或层排式二维条码，其编码原理是建立在一维条码基础上，按需要堆积成二行或多行。</p><p>常见：Code16k、Code49、PDF417。矩阵式二维码（矩阵式二维条码又称棋盘式二维条码，是在一个矩形空间通过黑、白像素在矩形中的不同分布进行编码）：最常见QR CODE（特点：存储大容量信息；支持所有类型的数据；在小空间内打印；解码速度快。基本结构：格式信息：纠错等级+版本信息：即二维码的规格，QR码符号共有40种规格的矩阵）</p><p>常考：补定位点和纠错等级。——&gt;可利用工具QRazyBox等选择正确纠错等级后手动进行填充补全二维码。</p><img src="/images/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/u=34054438,971394809&fm=26&fmt=auto&gp=0.jpg" alt="点击查看源网页" style="zoom: 80%;" /><h4 id="3-稀奇古怪的编码（社会主义核心价值观、与佛论禅、熊曰-与熊问道等）"><a href="#3-稀奇古怪的编码（社会主义核心价值观、与佛论禅、熊曰-与熊问道等）" class="headerlink" title="3.稀奇古怪的编码（社会主义核心价值观、与佛论禅、熊曰/与熊问道等）"></a>3.稀奇古怪的编码（社会主义核心价值观、与佛论禅、熊曰/与熊问道等）</h4><p>（1）社会主义核心价值观编码：由二十四个字的社会主义核心价值观组成。</p><p>（2）与佛论禅：格式：“佛曰：+佛语”</p><p>（3）与熊问道：类似与佛论禅，开头为“熊曰”。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二篇博客</title>
      <link href="/2021/07/17/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/17/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="MISC初步学习"><a href="#MISC初步学习" class="headerlink" title="MISC初步学习"></a>MISC初步学习</h2><h3 id="misc图片隐写"><a href="#misc图片隐写" class="headerlink" title="misc图片隐写"></a>misc图片隐写</h3><p>注释：本文所说的文件名均包括扩展名</p><h4 id="1-Misc简介"><a href="#1-Misc简介" class="headerlink" title="1.Misc简介"></a>1.Misc简介</h4><p>概念：Misc为英文miscellaneous的前四个字母，杂项、混合体、大杂烩的意思。</p><p>主要类型：（1）数据编码/图片密码；（2）图片隐写；（3）音频&amp;视频隐写；（4）流量分析（主要分析这段流量里用户做了什么）；（5）内存取证（磁盘）；（6）游戏隐写。</p><h4 id="2-基础知识："><a href="#2-基础知识：" class="headerlink" title="2.基础知识："></a>2.基础知识：</h4><p>（1）010editor介绍（winhex）：工具，什么文件都可用它打开。以十六进制的方式呈现。</p><p>（2）图片十六进制文件头+文件模板：</p><p><strong>模板</strong>常用于告知宽、高和属性等信息。</p><p><strong>常见十六进制文件头：</strong></p><table><thead><tr><th>文件类型</th><th>文件头</th></tr></thead><tbody><tr><td>JPEG（jpg）</td><td>文件头：FFD8FF  结尾：FFD9，超过FFD9部分不会再读取</td></tr><tr><td>PNG</td><td>89504E47</td></tr><tr><td>GIF</td><td>474946383961</td></tr><tr><td>TIFF</td><td>49492A00</td></tr><tr><td>Windows Bitmap（bmp）</td><td>424D</td></tr><tr><td>CAD（dwg）</td><td>41433130</td></tr><tr><td>Adobe Pshotoshop（psd）</td><td>38425053</td></tr><tr><td>Rich TextFormat（rtf）</td><td>7B5C727466</td></tr><tr><td>XML（xml）</td><td>3C3F786D6C</td></tr><tr><td>HTML</td><td>68746D6C3E</td></tr><tr><td>Email[thorough only]（eml）</td><td>44656C69766572792D646174653A</td></tr><tr><td>Outlook Express（dbx）</td><td>CFAD12FEC5FD746F</td></tr><tr><td>Outlook（pst）</td><td>2142444E</td></tr><tr><td>Ms Word/Excel (xls.or.doc)</td><td>d0cf11e0a1b11ae10000</td></tr><tr><td>MS Access (mdb)</td><td>5374616E64617264204A</td></tr><tr><td>WordPerfect (wpd)</td><td>FF575043</td></tr><tr><td>Adobe Acrobat (pdf)</td><td>255044462D312E</td></tr><tr><td>Quicken (qdf)</td><td>AC9EBD8F</td></tr><tr><td>Windows Password (pwl)</td><td>E3828596</td></tr><tr><td>ZIP Archive (zip)</td><td>504B0304</td></tr><tr><td>RAR Archive (rar)</td><td>52617221</td></tr><tr><td>Wave (wav)</td><td>57415645</td></tr><tr><td>AVI(avi)</td><td>41564920</td></tr><tr><td>Real Audio (ram)</td><td>2E7261FD</td></tr><tr><td>Real Media (rm)</td><td>2E524D46</td></tr><tr><td>MPEG (mpg)</td><td>000001BA</td></tr><tr><td>MPEG(mpg)</td><td>000001B3</td></tr><tr><td>Quicktime (mov)</td><td>6D6F6F76</td></tr><tr><td>Windows Media (asf)</td><td>3026B2758E66CF11</td></tr><tr><td>MIDl(mid)</td><td>4D546864</td></tr></tbody></table><p>（3）文件属性（exiftools）：右键——&gt;属性——&gt;详细信息</p><p>（4）Kail虚拟机</p><h4 id="3-图片隐写分类"><a href="#3-图片隐写分类" class="headerlink" title="3.图片隐写分类"></a>3.图片隐写分类</h4><p><strong>图片隐写：</strong>把信息隐藏到图片中</p><p><strong>分类：</strong></p><p>（1）右击属性</p><p>（2）文件末尾藏有字符串：可利用到达结尾后停止读取的特性来隐藏信息</p><p><strong>文件十六进制藏有字符串：</strong></p><p>一、strings查找可打印的字符：图片右击打开控制台输入string+文件名.扩展名</p><p>二、grep使用正则表达式搜索，并输出匹配的行：grep flag</p><p>三、file识别文件类型：</p><p>当文件无后缀名时可通过010打开文件观察文件头以此来确定文件类型。如果用010无法判断文件类型，则可复制进Kail中查看，可直接看到也可打开终端输入命令file+文件名进行查看。</p><p>（四五六的例子）例如，一张png图片中隐藏着一张jpg图片的信息</p><p>四、binwalk分离文件：虚拟机中右击文件打开终端输入命令：binwalk+文件名/binwalk -e +文件名查看。</p><p>五、foremost提取文件：虚拟机中右击文件打开终端输入命令：foremost+文件名进行文件分离和查看。</p><p>六、虚拟机中右击文件打开终端输入命令：dd if=binwalk,foremost,源文件of所要分离的隐藏文件名 bs=1（每次读取一个块）skip=开始处（先利用命令进行分析查看） ——&gt;进行文件分离。</p><p><strong>foremost和dd区别：</strong>foremost可分离所有文件，但不一定能分离出所需要的所有的文件；dd适用于在多个文件中单独分离出所需要的那一个</p><p>（3）文件包含：进行百度自学</p><p>（4）修改文件头：（文件需要正确文件名才能显示。）破坏文件头一定不能读取，破坏文件尾还有可能读取。若文件头被破坏可找该文件类型的固定字段分析。</p><p>（5）GIF：特殊帧（ps/stegsolve）+帧的时间间隔</p><p>方法一：用PS分解图层来分析图片</p><p>方法二：利用stegsolve（安装stegsolve需要java环境）的分析中的帧浏览器</p><p>ABAB式的时间间隔则需想到二进制码源和摩斯</p><p>（6）png（bmp）：</p><p><strong>IHDR、IDAT</strong>：</p><p>IHDR表示图片的宽和高，可利用010进行修改，修改后需要进行保存。一般来说只修改高，修改宽会导致图片不能正确显示，修改高往大的改。</p><p>如果用010打开一张图片它下面显示报错，则说明它的高可能被修改了。可利用校验和计算来判断高是否被修改，也可用脚本爆破一下得知原来的高度。</p><p>IDAT数据块不能变，变了就不能显示了。（小知识：写满上一个块后才会进入下一个块的填写。如果发现上一个块没写满就填写下一个块则可能存在隐写。）</p><p>010复制快捷键：ctrl+shift+c</p><p>python多行输入固定写法，三个单引号</p><p><strong>zlib（010/pngcheck）</strong>：</p><p>用pngcheck查看或者复制进虚拟机打卡终端输入命令“binwalk -e  文件名”生成文件夹进行查看</p><p><strong>lsb隐写/lsb加密（zsteg/stegsolve）</strong>：</p><p>lsb又称最低有效位隐写，即通过最低两位的修改进行隐写。可利用stegsolve选择通道进行分析（学习地址：<a href="https://www.cnblogs.com/cat47/p/11483478.html">stegsolve使用方法 - cat47 - 博客园 (cnblogs.com)</a>）；也可以在虚拟机中打开终端输入“zsteg 文件名”命令进行查看（需安装zsteg），如果还是没有所需信息，则可输入命令“zsteg -a 文件名”进行更多信息的获取。（如果需要保存文件则在终端输入命令“zsteg -e 文件所在通道通道 源文件名 &gt;所要保存的文件名”）</p><p>save text与save bin的区别：save text在复制时会将十六进制与文本一齐复制下来；而save bin想复制十六进制则可单独复制十六进制，复制文本也一样。</p><p><strong>wbs43open（bmp）</strong>：</p><p>利用wbs43open输入密钥进行文件分离，查看隐写内容。</p><p>（7）JPG</p><p>（8）双图隐写</p><p>（9）stegpy</p><p>（10）silenteye</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2021/07/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="网络安全入门学习"><a href="#网络安全入门学习" class="headerlink" title="网络安全入门学习"></a>网络安全入门学习</h2><h3 id="网络安全大致的细分方向"><a href="#网络安全大致的细分方向" class="headerlink" title="网络安全大致的细分方向"></a>网络安全大致的细分方向</h3><p>​        网络安全的细分方向大致有计算机环境安全、数据安全、身份与访问安全、通信安全、应用安全、开发安全、业务安全、安全管理、云安全、智能安全、物联网安全、移动安全、工业互联网安全、区块链安全以及安全服务等。下面用一张长图来总结网络安全的细分方向。（资料源于知乎上腾讯安全联合实验室的回答）</p><img src="https://pic2.zhimg.com/80/v2-d7e84da65c80ef6580e22380cbf1918f_1440w.jpg" style="zoom:50%;" /><h3 id="几个网络安全方向的缩写科普"><a href="#几个网络安全方向的缩写科普" class="headerlink" title="几个网络安全方向的缩写科普"></a>几个网络安全方向的缩写科普</h3><h4 id="1-web安全"><a href="#1-web安全" class="headerlink" title="1. web安全"></a>1. web安全</h4><p>​        定义：保证web环境安全，为新型互联网产品提供安全平台。</p><p>​        攻击种类：</p><p>​               1.SQL注入：即通过把SQL命令插入到web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令，比如影视网站泄露VIP会员密码大多数就是通过web表单递交查询字符暴露出来的，这类表单容易受到SQL注入式攻击。</p><p>​             2.跨站脚本攻击（也成为XXS）：指利用网络漏洞从用户那里恶意盗取信息，攻击者通过在链接中插入恶意代码从而盗取用户信息。</p><p>​            3.网页挂马：把一个木马程序上传到一个网站里面然后用木马生成器生一个网马，再上传到空间里面，再加代码使得木马在打开的网页里运行。</p><p>​        防火墙：</p><p>​        web应用防火墙（简称WAF）提供了一种安全运维控制手段：基于对HTTP/HTTPS流量的双向分析，为web应用提供实时的防护。</p><h4 id="2-pwn二进制"><a href="#2-pwn二进制" class="headerlink" title="2.pwn二进制"></a>2.pwn二进制</h4><p>​        定义：是一个黑客语法的俚语词，指攻破设备或系统。也称为二进制溢出。</p><p>​       CTF中PWN题型通常会直接给定一个已经编译好的二进制程序（Windows下的EXE或者Linux下的ELF文件等），然后参赛选手通过对二进制程序进行逆向分析和调试来找到利用漏洞，并编写利用代码，通过远程代码执行来达到溢出攻击的效果，最终拿到目标机器的shell夺取flag。</p><p>​      漏洞一般是1、gets函数这种对输入没有限制导致溢出。2、格式化字符串漏洞。3、数据类型转换的时候产生了溢出。 总的来说就是对输入的值限制的不够让用户的输入影响了执行流。</p><p>​       著名赛事：</p><p>​       1.pwn20wn：活动主要目的是希望安全研究人员、开发人员，以及黑客们通过某些此前未知的漏洞来侵入各种移动设备，然后将之汇报给相应的设备制造商，以便它们对这些漏洞进行修补和修复。</p><p>​       2.GeekPwn：堪称全球最大规模的智能设备破解挑战赛。</p><h4 id="3-pentest"><a href="#3-pentest" class="headerlink" title="3.pentest"></a>3.pentest</h4><p>​        定义：pentest是penetration test的简写，是渗透性测试的意思。其并没有一个标准的定义，国外一些安全组织达成共识的通用说法是：渗透测试是通过模拟恶意黑客的攻击方法，来评估计算机网络系统安全的一种评估方法。这个过程包括对系统的任何弱点、技术缺陷或漏洞的主动分析，这个分析是从一个攻击者可能存在的位置来进行的，并且从这个位置有条件主动利用安全漏洞。</p><p>​       补充：渗透测试（Penetration testing）是一种旨在探查和暴露信息系统中的安全性弱点以便对其进行修复的测试。</p><h4 id="4-res"><a href="#4-res" class="headerlink" title="4.res"></a>4.res</h4><p>​        re安全知识点：</p><p>​        DLL注入：把一个DLL文件放到目标进程中。最大目的是进入目标进程的地址空间，这样就可以操作目标进程中的对象了。</p><p>​        注入方式：</p><p>​        1.远程线程注入；</p><p>​        2.利用hook注入。</p><h4 id="5-crypto加密"><a href="#5-crypto加密" class="headerlink" title="5.crypto加密"></a>5.crypto加密</h4><p>​        密码学（cryptography）：通过将信息转换为非人类可读的格式来隐藏信息的真正含义。一般分为古典密码学和现代密码学。</p><p>​        <strong>·</strong>古典密码学：单表替换加密+多表替换加密+奇奇怪怪的机密方式</p><p>​        <strong>·</strong>现代密码学：对称加密（分组密码/块密码+序列密码/流密码）+非对称加密+哈希函数+数字签名</p><p>​       密码分析：</p><p>​        1.定义：一种尝试在不使用密钥的情况下解密的技术，密码分析使用数学分析和算法来解密密码。</p><p>​        2.成功取决于：</p><p>​        可用时间+可用的计算能力+可用存储容量</p><p>​         3.常用的密码分析攻击列表：</p><p>​      （1）暴力攻击；（2）字典攻击；（3）彩虹表攻击；（4）猜测；（5）爬虫。</p><h4 id="6-reverse逆向"><a href="#6-reverse逆向" class="headerlink" title="6.reverse逆向"></a>6.reverse逆向</h4><p>​        逆向工程。细节又分为安卓逆向、Windows上的exe逆向等等，都是按操作系统或编程语言来区分的。</p><p>​        逆向一般常用的操作都有：PEtools查壳、Upx脱壳、IDA pro静态反汇编、OllyDbg动态调试。</p><h4 id="7-misc杂项"><a href="#7-misc杂项" class="headerlink" title="7.misc杂项"></a>7.misc杂项</h4><p>​        主要就是指“取证、隐写”等 一 些其它的方向。例如：GIF图片隐写、PDF隐写、流量隐写、二维码复原。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/09/hello-world/"/>
      <url>/2021/07/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
